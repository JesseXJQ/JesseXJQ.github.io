<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Leetcode_Summary]]></title>
      <url>/2020/01/20/Leetcode-Summary/</url>
      <content type="html"><![CDATA[<p>Sources:</p>
<ol>
<li>summer</li>
<li>1-50</li>
<li>Top Interview Questions (before 200)</li>
</ol>
<h2 id="DFS-memo"><a href="#DFS-memo" class="headerlink" title="DFS + memo"></a>DFS + memo</h2><h3 id="98-Validate-Binary-Search-Tree-Medium"><a href="#98-Validate-Binary-Search-Tree-Medium" class="headerlink" title="98. Validate Binary Search Tree (Medium) @"></a>98. Validate Binary Search Tree (Medium) <a href="https://leetcode.com/problems/validate-binary-search-tree/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Given a binary tree, determine if it is a valid binary search tree (BST).</p>
<p>Assume a BST is defined as follows:</p>
<ul>
<li>The left subtree of a node contains only nodes with keys <strong>less than</strong> the node’s key.</li>
<li>The right subtree of a node contains only nodes with keys <strong>greater than</strong> the node’s key.</li>
<li>Both the left and right subtrees must also be binary search trees.</li>
</ul>
</blockquote>
<p><strong>Solution 1 Recursion</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">helper</span><span class="params">(TreeNode node, Integer lower, Integer upper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> val = node.val;</span><br><span class="line">        <span class="keyword">if</span> (lower != <span class="keyword">null</span> &amp;&amp; val &lt;= lower) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (upper != <span class="keyword">null</span> &amp;&amp; val &gt;= upper) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!helper(node.left, lower, val)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (!helper(node.right, val, upper)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidBST</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helper(root, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Solution 2 Iteration</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">LinkedList&lt;TreeNode&gt; stack = <span class="keyword">new</span> LinkedList();</span><br><span class="line">LinkedList&lt;Integer&gt; uppers = <span class="keyword">new</span> LinkedList(), lowers = <span class="keyword">new</span> LinkedList();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(TreeNode root, Integer lower, Integer upper)</span> </span>&#123;</span><br><span class="line">    stack.add(root);</span><br><span class="line">    uppers.add(upper);</span><br><span class="line">    lowers.add(lower);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidBST</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    Integer lower = <span class="keyword">null</span>, upper = <span class="keyword">null</span>, val;</span><br><span class="line">    update(root, lower, upper);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">        root = stack.poll();</span><br><span class="line">        lower = lowers.poll();</span><br><span class="line">        upper = uppers.poll();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">continue</span>;</span><br><span class="line">        val = root.val;</span><br><span class="line">        <span class="keyword">if</span> (lower != <span class="keyword">null</span> &amp;&amp; val &lt;= lower) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (upper != <span class="keyword">null</span> &amp;&amp; val &gt;= upper) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        update(root.left, lower, val);</span><br><span class="line">        update(root.right, val, upper);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Solution 3 Inorder Traversal</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidBST</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack();</span><br><span class="line">    <span class="keyword">double</span> inorder = - Double.MAX_VALUE;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty() || root != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stack.push(root);</span><br><span class="line">            root = root.left;</span><br><span class="line">        &#125;</span><br><span class="line">        root = stack.pop();</span><br><span class="line">        <span class="keyword">if</span> (root.val &lt;= inorder) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        inorder = root.val;</span><br><span class="line">        root = root.right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="101-Symmetric-Tree-Easy"><a href="#101-Symmetric-Tree-Easy" class="headerlink" title="101. Symmetric Tree (Easy) @"></a>101. Symmetric Tree (Easy) <a href="https://leetcode.com/problems/symmetric-tree/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).</p>
<p>For example, this binary tree <code>[1,2,2,3,4,4,3]</code> is symmetric:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;  1</span><br><span class="line">&gt; / \</span><br><span class="line">&gt; 2   2</span><br><span class="line">&gt; / \ / \</span><br><span class="line">&gt; 3  4 4  3</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p>But the following <code>[1,2,2,null,3,null,3]</code> is not:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;  1</span><br><span class="line">&gt; / \</span><br><span class="line">&gt; 2   2</span><br><span class="line">&gt; \   \</span><br><span class="line">&gt; 3    3</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>Solution 1 Recursion</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isMirror</span><span class="params">(TreeNode t1, TreeNode t2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (t1 == <span class="keyword">null</span> &amp;&amp; t2 == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (t1 == <span class="keyword">null</span> || t2 == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> (t1.val == t2.val) &amp;&amp; isMirror(t1.right, t2.left) &amp;&amp; isMirror(t1.left, t2.right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSymmetric</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> isMirror(root.left, root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Solution 2 Iteration</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSymmetric</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    Queue&lt;TreeNode&gt; q = <span class="keyword">new</span> LinkedList();</span><br><span class="line">    q.add(root.left);</span><br><span class="line">    q.add(root.right);</span><br><span class="line">    <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">        TreeNode t1 = q.poll();</span><br><span class="line">        TreeNode t2 = q.poll();</span><br><span class="line">        <span class="keyword">if</span> (t1 == <span class="keyword">null</span> &amp;&amp; t2 == <span class="keyword">null</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (t1 == <span class="keyword">null</span> || t2 == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (t1.val != t2.val) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        q.add(t1.left);</span><br><span class="line">        q.add(t2.right);</span><br><span class="line">        q.add(t1.right);</span><br><span class="line">        q.add(t2.left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="104-Maximum-Depth-of-Binary-Tree-Easy"><a href="#104-Maximum-Depth-of-Binary-Tree-Easy" class="headerlink" title="104. Maximum Depth of Binary Tree (Easy) @"></a>104. Maximum Depth of Binary Tree (Easy) <a href="https://leetcode.com/problems/maximum-depth-of-binary-tree/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Given a binary tree, find its maximum depth.</p>
<p>The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p>
<p><strong>Note:</strong> A leaf is a node with no children.</p>
<p><strong>Example:</strong></p>
<p>Given binary tree <code>[3,9,20,null,null,15,7]</code>,</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;  3</span><br><span class="line">&gt; / \</span><br><span class="line">&gt; 9  20</span><br><span class="line">&gt;  /  \</span><br><span class="line">&gt; 15   7</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p>return its depth = 3.</p>
</blockquote>
<p><strong>Solution 1 Recursion</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> Math.max(maxDepth(root.left), maxDepth(root.right)) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Solution 2 Iteration (BFS)</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        LinkedList&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class="line">        <span class="keyword">int</span> level = <span class="number">0</span>;</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">int</span> curNum = <span class="number">1</span>, nextNum = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            TreeNode node = queue.poll();</span><br><span class="line">            curNum--;</span><br><span class="line">            <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                nextNum++;</span><br><span class="line">                queue.add(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                nextNum++;</span><br><span class="line">                queue.add(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (curNum == <span class="number">0</span>) &#123;</span><br><span class="line">                curNum = nextNum;</span><br><span class="line">                nextNum = <span class="number">0</span>;</span><br><span class="line">                level++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> level;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="105-Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal-Medium"><a href="#105-Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal-Medium" class="headerlink" title="105.  Construct Binary Tree from Preorder and Inorder Traversal (Medium) @"></a>105.  Construct Binary Tree from Preorder and Inorder Traversal (Medium) <a href="https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Given preorder and inorder traversal of a tree, construct the binary tree.</p>
<p><strong>Note:</strong><br>You may assume that duplicates do not exist in the tree.</p>
<p>For example, given</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; preorder = [3,9,20,15,7]</span><br><span class="line">&gt; inorder = [9,3,15,20,7]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p>Return the following binary tree:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;  3</span><br><span class="line">&gt; / \</span><br><span class="line">&gt; 9  20</span><br><span class="line">&gt;  /  \</span><br><span class="line">&gt; 15   7</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>Solution Divide and Conquer + Recursion</strong> </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder)</span> </span>&#123;</span><br><span class="line">        TreeNode root = createTree(preorder, <span class="number">0</span>, preorder.length-<span class="number">1</span>, inorder, <span class="number">0</span>, inorder.length-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> TreeNode <span class="title">createTree</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span> startPre, <span class="keyword">int</span> endPre, <span class="keyword">int</span>[] inorder, <span class="keyword">int</span> startIn, <span class="keyword">int</span> endIn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (startPre &gt; endPre || startIn &gt; endIn) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(preorder[startPre]);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = startIn; i &lt;= endIn; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (inorder[i] == preorder[startPre]) &#123;</span><br><span class="line">                <span class="comment">//i-startIn是左子树长度</span></span><br><span class="line">                root.left = createTree(preorder, startPre + <span class="number">1</span>, startPre + i - startIn, inorder, startIn, i-<span class="number">1</span>);</span><br><span class="line">                <span class="comment">//右子树开始节点是从左子树开始节点加上左子树的长度</span></span><br><span class="line">                root.right = createTree(preorder, startPre + <span class="number">1</span> + i - startIn, endPre, inorder, i + <span class="number">1</span>, endIn);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="108-Convert-Sorted-Array-to-Binary-Search-Tree-Easy"><a href="#108-Convert-Sorted-Array-to-Binary-Search-Tree-Easy" class="headerlink" title="108. Convert Sorted Array to Binary Search Tree (Easy) @"></a>108. Convert Sorted Array to Binary Search Tree (Easy) <a href="https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Given an array where elements are sorted in ascending order, convert it to a height balanced BST.</p>
<p>For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of <em>every</em> node never differ by more than 1.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; Given the sorted array: [-10,-3,0,5,9],</span><br><span class="line">&gt; </span><br><span class="line">&gt; One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:</span><br><span class="line">&gt; </span><br><span class="line">&gt;    0</span><br><span class="line">&gt;   / \</span><br><span class="line">&gt; -3   9</span><br><span class="line">&gt; /   /</span><br><span class="line">&gt; -10  5</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>Solution 1 Recursion</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">sortedArrayToBST</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dfs(nums, <span class="number">0</span>, nums.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> TreeNode <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start &gt; end) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = (start + end) / <span class="number">2</span>;</span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(nums[mid]);</span><br><span class="line">        root.left = dfs(nums, start, mid - <span class="number">1</span>);</span><br><span class="line">        root.right = dfs(nums, mid + <span class="number">1</span>, end);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="116-Populating-Next-Right-Pointers-in-Each-Node-Medium"><a href="#116-Populating-Next-Right-Pointers-in-Each-Node-Medium" class="headerlink" title="116. Populating Next Right Pointers in Each Node (Medium) @"></a>116. Populating Next Right Pointers in Each Node (Medium) <a href="https://leetcode.com/problems/populating-next-right-pointers-in-each-node/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>You are given a <strong>perfect binary tree</strong> where all leaves are on the same level, and every parent has two children.</p>
<p>Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to <code>NULL</code>.</p>
<p>Initially, all next pointers are set to <code>NULL</code>.</p>
<p><strong>Follow up:</strong></p>
<ul>
<li>You may only use constant extra space.</li>
<li>Recursive approach is fine, you may assume implicit stack space does not count as extra space for this problem.</li>
</ul>
</blockquote>
<p><strong>Solution 1 Recursion</strong></p>
<p>这道题解法还是挺直白的，如果当前节点有左孩子，那么左孩子的next就指向右孩子。如果当前节点有右孩子，那么判断，如果当前节点的next是null，说明当前节点已经到了最右边，那么右孩子也是最右边的，所以右孩子指向null。如果当前节点的next不是null，那么当前节点的右孩子的next就需要指向当前节点next的左孩子。递归求解就好。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">    public int val;</span></span><br><span class="line"><span class="comment">    public Node left;</span></span><br><span class="line"><span class="comment">    public Node right;</span></span><br><span class="line"><span class="comment">    public Node next;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node() &#123;&#125;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    public Node(int _val) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node(int _val, Node _left, Node _right, Node _next) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        left = _left;</span></span><br><span class="line"><span class="comment">        right = _right;</span></span><br><span class="line"><span class="comment">        next = _next;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">connect</span><span class="params">(Node root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (root.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">            root.left.next = root.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (root.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">                root.right.next = root.next.left;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                root.right.next = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        connect(root.left);</span><br><span class="line">        connect(root.right);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="124-Binary-Tree-Maximum-Path-Sum-Hard"><a href="#124-Binary-Tree-Maximum-Path-Sum-Hard" class="headerlink" title="124. Binary Tree Maximum Path Sum (Hard) @"></a>124. Binary Tree Maximum Path Sum (Hard) <a href="https://leetcode.com/problems/binary-tree-maximum-path-sum/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Given a <strong>non-empty</strong> binary tree, find the maximum path sum.</p>
<p>For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain <strong>at least one node</strong> and does not need to go through the root.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: [1,2,3]</span><br><span class="line">&gt; </span><br><span class="line">&gt;     1</span><br><span class="line">&gt;    / \</span><br><span class="line">&gt;   2   3</span><br><span class="line">&gt; </span><br><span class="line">&gt; Output: 6</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: [-10,9,20,null,null,15,7]</span><br><span class="line">&gt; </span><br><span class="line">&gt; -10</span><br><span class="line">&gt; / \</span><br><span class="line">&gt; 9  20</span><br><span class="line">&gt;  /  \</span><br><span class="line">&gt; 15   7</span><br><span class="line">&gt; </span><br><span class="line">&gt; Output: 42</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<ul>
<li>递归的思想，DFS，从下到上</li>
<li>每个节点可以与其左右节点结合，但每个节点作为子节点返回时，只能选去该节点的值和其较大子节点的值的和返回<br>Solution<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = Integer.MIN_VALUE;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxPathSum</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        helper(root);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">helper</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> left = Math.max(helper(root.left), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> right = Math.max(helper(root.right), <span class="number">0</span>);</span><br><span class="line">        res = Math.max(res, left + right + root.val);</span><br><span class="line">        <span class="keyword">return</span> Math.max(left, right) + root.val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="130-Surrounded-Regions-Medium"><a href="#130-Surrounded-Regions-Medium" class="headerlink" title="130. Surrounded Regions (Medium) @"></a>130. Surrounded Regions (Medium) <a href="https://leetcode.com/problems/surrounded-regions/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Given a 2D board containing <code>&#39;X&#39;</code> and <code>&#39;O&#39;</code> (<strong>the letter O</strong>), capture all regions surrounded by <code>&#39;X&#39;</code>.</p>
<p>A region is captured by flipping all <code>&#39;O&#39;</code>s into <code>&#39;X&#39;</code>s in that surrounded region.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; X X X X</span><br><span class="line">&gt; X O O X</span><br><span class="line">&gt; X X O X</span><br><span class="line">&gt; X O X X</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p>After running your function, the board should be:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; X X X X</span><br><span class="line">&gt; X X X X</span><br><span class="line">&gt; X X X X</span><br><span class="line">&gt; X O X X</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Explanation:</strong></p>
<p>Surrounded regions shouldn’t be on the border, which means that any <code>&#39;O&#39;</code> on the border of the board are not flipped to <code>&#39;X&#39;</code>. Any <code>&#39;O&#39;</code> that is not on the border and it is not connected to an <code>&#39;O&#39;</code> on the border will be flipped to <code>&#39;X&#39;</code>. Two cells are connected if they are adjacent cells connected horizontally or vertically.</p>
</blockquote>
<p><strong>Solution Recursion</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">char</span>[][] board)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (board == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> rows = board.length;</span><br><span class="line">        <span class="keyword">if</span> (rows &lt;= <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> cols = board[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">if</span> (cols &lt;= <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// 找到边缘‘O’</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i][<span class="number">0</span>] == <span class="string">'O'</span>)</span><br><span class="line">                dfs(board, i, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (board[i][cols-<span class="number">1</span>] == <span class="string">'O'</span>)</span><br><span class="line">                dfs(board, i, cols-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cols; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[<span class="number">0</span>][i] == <span class="string">'O'</span>)</span><br><span class="line">                dfs(board, <span class="number">0</span>, i);</span><br><span class="line">            <span class="keyword">if</span> (board[rows-<span class="number">1</span>][i] == <span class="string">'O'</span>)</span><br><span class="line">                dfs(board, rows-<span class="number">1</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cols; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] == <span class="string">'#'</span>)</span><br><span class="line">                    board[i][j] = <span class="string">'O'</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (board[i][j] == <span class="string">'O'</span>)</span><br><span class="line">                    board[i][j] = <span class="string">'X'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//每遇到‘O’后，向四个方向递归搜索，所有相邻‘O’变为‘#’</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">char</span>[][] board, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (board[i][j] == <span class="string">'O'</span>) &#123;</span><br><span class="line">            board[i][j] = <span class="string">'#'</span>;</span><br><span class="line">		<span class="comment">// 跳过四周边缘</span></span><br><span class="line">            <span class="keyword">if</span> (i &lt; board.length - <span class="number">2</span>)</span><br><span class="line">                dfs(board, i + <span class="number">1</span>, j);</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">1</span>)</span><br><span class="line">                dfs(board, i - <span class="number">1</span>, j);</span><br><span class="line">            <span class="keyword">if</span> (j &lt; board[<span class="number">0</span>].length - <span class="number">2</span>)</span><br><span class="line">                dfs(board, i, j + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (j &gt; <span class="number">1</span>) </span><br><span class="line">                dfs(board, i, j - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="200-Number-of-Islands-Medium"><a href="#200-Number-of-Islands-Medium" class="headerlink" title="200. Number of Islands (Medium) @"></a>200. Number of Islands (Medium) <a href="https://leetcode.com/problems/number-of-islands/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Given a 2d grid map of <code>&#39;1&#39;</code>s (land) and <code>&#39;0&#39;</code>s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input:</span><br><span class="line">&gt; 11110</span><br><span class="line">&gt; 11010</span><br><span class="line">&gt; 11000</span><br><span class="line">&gt; 00000</span><br><span class="line">&gt; </span><br><span class="line">&gt; Output: 1</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input:</span><br><span class="line">&gt; 11000</span><br><span class="line">&gt; 11000</span><br><span class="line">&gt; 00100</span><br><span class="line">&gt; 00011</span><br><span class="line">&gt; </span><br><span class="line">&gt; Output: 3</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>Solution DFS + Recursion</strong></p>
<ul>
<li>采用DFS，访问过的‘1’转为‘0’，继续遍历<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="keyword">char</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (grid == <span class="keyword">null</span> || grid.length == <span class="number">0</span> || grid[<span class="number">0</span>].length == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> rows = grid.length;</span><br><span class="line">        <span class="keyword">int</span> cols = grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cols; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="string">'1'</span>)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    dfs(grid, i, j);    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">char</span>[][] grid, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt; grid.length-<span class="number">1</span> || j &lt; <span class="number">0</span> || j &gt; grid[<span class="number">0</span>].length-<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (grid[i][j] == <span class="string">'0'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (grid[i][j] == <span class="string">'1'</span>) &#123;</span><br><span class="line">            grid[i][j] = <span class="string">'0'</span>;</span><br><span class="line">            dfs(grid, i-<span class="number">1</span>, j);</span><br><span class="line">            dfs(grid, i+<span class="number">1</span>, j);</span><br><span class="line">            dfs(grid, i, j-<span class="number">1</span>);</span><br><span class="line">            dfs(grid, i, j+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="207-Course-Schedule-Medium"><a href="#207-Course-Schedule-Medium" class="headerlink" title="207. Course Schedule (Medium) @"></a>207. Course Schedule (Medium) <a href="https://leetcode.com/problems/course-schedule/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>There are a total of <em>n</em> courses you have to take, labeled from <code>0</code> to <code>n-1</code>.</p>
<p>Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: <code>[0,1]</code></p>
<p>Given the total number of courses and a list of prerequisite <strong>pairs</strong>, is it possible for you to finish all courses?</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: 2, [[1,0]] </span><br><span class="line">&gt; Output: true</span><br><span class="line">&gt; Explanation: There are a total of 2 courses to take. </span><br><span class="line">&gt;           To take course 1 you should have finished course 0. So it is possible.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: 2, [[1,0],[0,1]]</span><br><span class="line">&gt; Output: false</span><br><span class="line">&gt; Explanation: There are a total of 2 courses to take. </span><br><span class="line">&gt;           To take course 1 you should have finished course 0, and to take course 0 you should</span><br><span class="line">&gt;           also have finished course 1. So it is impossible.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Note:</strong></p>
<ol>
<li>The input prerequisites is a graph represented by <strong>a list of edges</strong>, not adjacency matrices. Read more about <a href="https://www.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs" target="_blank" rel="noopener">how a graph is represented</a>.</li>
<li>You may assume that there are no duplicate edges in the input prerequisites.</li>
</ol>
</blockquote>
<p><strong>Solution Topology</strong></p>
<ul>
<li>此问题等价于图中是否有无环的存在（拓扑排序解决问题）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canFinish</span><span class="params">(<span class="keyword">int</span> numCourses, <span class="keyword">int</span>[][] prerequisites)</span> </span>&#123;</span><br><span class="line">        Map&lt;Integer, List&lt;Integer&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span>[] indegree = <span class="keyword">new</span> <span class="keyword">int</span>[numCourses]; </span><br><span class="line">        <span class="comment">//初始化图，利用hashmap</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prerequisites.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> s_node = prerequisites[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> e_node = prerequisites[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (!map.containsKey(s_node))</span><br><span class="line">                map.put(s_node, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">            map.get(s_node).add(e_node);</span><br><span class="line">            indegree[e_node]++;<span class="comment">//更新每个点的入度</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//储存所有入度为0的节点-&gt;拓扑排序起始点</span></span><br><span class="line">        Queue&lt;Integer&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (indegree[i] == <span class="number">0</span>)</span><br><span class="line">                q.offer(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//计算可拓扑排序的节点个数</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> val = q.poll();</span><br><span class="line">            count++;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(val)) &#123;</span><br><span class="line">                List&lt;Integer&gt; tmp = map.get(val);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tmp.size(); i++) &#123;</span><br><span class="line">                    <span class="keyword">int</span> idx = tmp.get(i);</span><br><span class="line">                    indegree[idx]--;</span><br><span class="line">                    <span class="keyword">if</span> (indegree[idx] == <span class="number">0</span>)</span><br><span class="line">                        q.offer(idx);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count == numCourses;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="210-Course-Schedule-II-Medium"><a href="#210-Course-Schedule-II-Medium" class="headerlink" title="210. Course Schedule II (Medium) @"></a>210. Course Schedule II (Medium) <a href="https://leetcode.com/problems/course-schedule-ii/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>There are a total of <em>n</em> courses you have to take, labeled from <code>0</code> to <code>n-1</code>.</p>
<p>Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: <code>[0,1]</code></p>
<p>Given the total number of courses and a list of prerequisite <strong>pairs</strong>, return the ordering of courses you should take to finish all courses.</p>
<p>There may be multiple correct orders, you just need to return one of them. If it is impossible to finish all courses, return an empty array.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: 2, [[1,0]] </span><br><span class="line">&gt; Output: [0,1]</span><br><span class="line">&gt; Explanation: There are a total of 2 courses to take. To take course 1 you should have finished   </span><br><span class="line">&gt;           course 0. So the correct course order is [0,1] .</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: 4, [[1,0],[2,0],[3,1],[3,2]]</span><br><span class="line">&gt; Output: [0,1,2,3] or [0,2,1,3]</span><br><span class="line">&gt; Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both     </span><br><span class="line">&gt;           courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0. </span><br><span class="line">&gt;           So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3] .</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Note:</strong></p>
<ol>
<li>The input prerequisites is a graph represented by <strong>a list of edges</strong>, not adjacency matrices. Read more about <a href="https://www.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs" target="_blank" rel="noopener">how a graph is represented</a>.</li>
<li>You may assume that there are no duplicate edges in the input prerequisites.</li>
</ol>
</blockquote>
<p><strong>Solution Topology</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] findOrder(<span class="keyword">int</span> numCourses, <span class="keyword">int</span>[][] prerequisites) &#123;</span><br><span class="line">        Map&lt;Integer, List&lt;Integer&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span>[] indegree = <span class="keyword">new</span> <span class="keyword">int</span>[numCourses]; </span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[numCourses];</span><br><span class="line">        <span class="comment">//初始化图，利用hashmap</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prerequisites.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> s_node = prerequisites[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> e_node = prerequisites[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (!map.containsKey(s_node))</span><br><span class="line">                map.put(s_node, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">            map.get(s_node).add(e_node);</span><br><span class="line">            indegree[e_node]++;<span class="comment">//更新每个点的入度</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//储存所有入度为0的节点-&gt;拓扑排序起始点</span></span><br><span class="line">        <span class="keyword">int</span> index = numCourses - <span class="number">1</span>;</span><br><span class="line">        Queue&lt;Integer&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (indegree[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                q.offer(i);</span><br><span class="line">                res[index--] = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//拓扑排序</span></span><br><span class="line">        <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> val = q.poll();</span><br><span class="line">            <span class="comment">//获取val指向的节点</span></span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(val)) &#123;</span><br><span class="line">                List&lt;Integer&gt; tmp = map.get(val);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tmp.size(); i++) &#123;</span><br><span class="line">                    <span class="keyword">int</span> idx = tmp.get(i);</span><br><span class="line">                    indegree[idx]--;</span><br><span class="line">                    <span class="keyword">if</span> (indegree[idx] == <span class="number">0</span>) &#123;</span><br><span class="line">                        q.offer(idx);</span><br><span class="line">                        res[index--] = idx;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index != -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h2><h3 id="102-Binary-Tree-Level-Order-Traversal-Medium"><a href="#102-Binary-Tree-Level-Order-Traversal-Medium" class="headerlink" title="102. Binary Tree Level Order Traversal (Medium) @"></a>102. Binary Tree Level Order Traversal (Medium) <a href="https://leetcode.com/problems/binary-tree-level-order-traversal/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Given a binary tree, return the <em>level order</em> traversal of its nodes’ values. (ie, from left to right, level by level).</p>
<p>For example:<br>Given binary tree <code>[3,9,20,null,null,15,7]</code>,</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;  3</span><br><span class="line">&gt; / \</span><br><span class="line">&gt; 9  20</span><br><span class="line">&gt;  /  \</span><br><span class="line">&gt; 15   7</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p>return its level order traversal as:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; [</span><br><span class="line">&gt; [3],</span><br><span class="line">&gt; [9,20],</span><br><span class="line">&gt; [15,7]</span><br><span class="line">&gt; ]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>Solution 1 Recursion</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">        helper(root, res, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(TreeNode root, List&lt;List&lt;Integer&gt;&gt; res, <span class="keyword">int</span> level)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (res.size() &lt; level+<span class="number">1</span>) &#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt; ());</span><br><span class="line">        &#125;</span><br><span class="line">        res.get(level).add(root.val);</span><br><span class="line">        </span><br><span class="line">        helper(root.left, res, level+<span class="number">1</span>);</span><br><span class="line">        helper(root.right, res, level+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Solution 2 Iteration (Queue)</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        <span class="keyword">int</span> level = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">//start current level</span></span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</span><br><span class="line">            <span class="comment">//num of elements in current level</span></span><br><span class="line">            <span class="keyword">int</span> len = queue.size();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">                TreeNode node = queue.poll();</span><br><span class="line">                <span class="comment">//get the val in each level</span></span><br><span class="line">                res.get(level).add(node.val);</span><br><span class="line">                <span class="comment">//add child nodes to queue</span></span><br><span class="line">                <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) queue.offer(node.left);</span><br><span class="line">                <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) queue.offer(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//go to next level</span></span><br><span class="line">            level++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="103-Binary-Tree-Zigzag-Level-Order-Traversal-Medium"><a href="#103-Binary-Tree-Zigzag-Level-Order-Traversal-Medium" class="headerlink" title="103. Binary Tree Zigzag Level Order Traversal (Medium) @"></a>103. Binary Tree Zigzag Level Order Traversal (Medium) <a href="https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Given a binary tree, return the <em>zigzag level order</em> traversal of its nodes’ values. (ie, from left to right, then right to left for the next level and alternate between).</p>
<p>For example:<br>Given binary tree <code>[3,9,20,null,null,15,7]</code>,</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;  3</span><br><span class="line">&gt; / \</span><br><span class="line">&gt; 9  20</span><br><span class="line">&gt;  /  \</span><br><span class="line">&gt; 15   7</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p>return its zigzag level order traversal as:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; [</span><br><span class="line">&gt; [3],</span><br><span class="line">&gt; [20,9],</span><br><span class="line">&gt; [15,7]</span><br><span class="line">&gt; ]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>Solution Recursion</strong></p>
<ul>
<li>based on 102, add a flag to identify reverse<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; zigzagLevelOrder(TreeNode root) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">        helper(root, res, <span class="number">0</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(TreeNode root, List&lt;List&lt;Integer&gt;&gt; res, <span class="keyword">int</span> level, <span class="keyword">boolean</span> flag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (res.size() &lt; level+<span class="number">1</span>) &#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> LinkedList&lt;Integer&gt; ());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="comment">//convert to LinkedList</span></span><br><span class="line">            ((LinkedList&lt;Integer&gt;)res.get(level)).addFirst(root.val);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            res.get(level).add(root.val);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        helper(root.left, res, level+<span class="number">1</span>, !flag);</span><br><span class="line">        helper(root.right, res, level+<span class="number">1</span>, !flag);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="127-Word-Ladder-Medium"><a href="#127-Word-Ladder-Medium" class="headerlink" title="127. Word Ladder (Medium) @"></a>127. Word Ladder (Medium) <a href="https://leetcode.com/problems/word-ladder/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Given two words (<em>beginWord</em> and <em>endWord</em>), and a dictionary’s word list, find the length of shortest transformation sequence from <em>beginWord</em> to <em>endWord</em>, such that:</p>
<ol>
<li>Only one letter can be changed at a time.</li>
<li>Each transformed word must exist in the word list. Note that <em>beginWord</em> is <em>not</em> a transformed word.</li>
</ol>
<p><strong>Note:</strong></p>
<ul>
<li>Return 0 if there is no such transformation sequence.</li>
<li>All words have the same length.</li>
<li>All words contain only lowercase alphabetic characters.</li>
<li>You may assume no duplicates in the word list.</li>
<li>You may assume <em>beginWord</em> and <em>endWord</em> are non-empty and are not the same.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input:</span><br><span class="line">&gt; beginWord = &quot;hit&quot;,</span><br><span class="line">&gt; endWord = &quot;cog&quot;,</span><br><span class="line">&gt; wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]</span><br><span class="line">&gt; </span><br><span class="line">&gt; Output: 5</span><br><span class="line">&gt; </span><br><span class="line">&gt; Explanation: As one shortest transformation is &quot;hit&quot; -&gt; &quot;hot&quot; -&gt; &quot;dot&quot; -&gt; &quot;dog&quot; -&gt; &quot;cog&quot;,</span><br><span class="line">&gt; return its length 5.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input:</span><br><span class="line">&gt; beginWord = &quot;hit&quot;</span><br><span class="line">&gt; endWord = &quot;cog&quot;</span><br><span class="line">&gt; wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;]</span><br><span class="line">&gt; </span><br><span class="line">&gt; Output: 0</span><br><span class="line">&gt; </span><br><span class="line">&gt; Explanation: The endWord &quot;cog&quot; is not in wordList, therefore no </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>Solution 1 BFS (Time Limit Exceeded)</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">ladderLength</span><span class="params">(String beginWord, String endWord, List&lt;String&gt; wordList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!wordList.contains(endWord)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        Queue&lt;String&gt; queue = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">        queue.offer(beginWord);</span><br><span class="line">        HashMap&lt;String, Integer&gt; maps = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;(); <span class="comment">//store the level of each string</span></span><br><span class="line">        maps.put(beginWord, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (wordList.contains(beginWord)) wordList.remove(beginWord);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            String top = queue.poll();</span><br><span class="line">            <span class="keyword">int</span> len = top.length();</span><br><span class="line">            StringBuilder builder;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">int</span> level = maps.get(top);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">                <span class="comment">//find the strings which is one char diff with top</span></span><br><span class="line">                builder = <span class="keyword">new</span> StringBuilder(top);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">char</span> c = <span class="string">'a'</span>; c &lt;= <span class="string">'z'</span>; c++) &#123;</span><br><span class="line">                    builder.setCharAt(i, c);</span><br><span class="line">                    String tmpStr = builder.toString();</span><br><span class="line">                    <span class="keyword">if</span> (tmpStr.equals(top))<span class="comment">//match top</span></span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="comment">//add to next level</span></span><br><span class="line">                    <span class="keyword">if</span> (wordList.contains(tmpStr)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (tmpStr.equals(endWord))<span class="comment">//match endWord-&gt;return </span></span><br><span class="line">                            <span class="keyword">return</span> level+<span class="number">1</span>;</span><br><span class="line">                        queue.offer(tmpStr);</span><br><span class="line">                        wordList.remove(tmpStr);</span><br><span class="line">                        maps.put(tmpStr, level+<span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Solution 2 Bidirectional Breadth First Search<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">ladderLength</span><span class="params">(String beginWord, String endWord, List&lt;String&gt; wordList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!wordList.contains(endWord)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//top-&gt;down</span></span><br><span class="line">        Queue&lt;String&gt; queue1 = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue1.add(beginWord);</span><br><span class="line">        <span class="comment">//down-&gt;top</span></span><br><span class="line">        Queue&lt;String&gt; queue2 = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue2.add(endWord);</span><br><span class="line">        </span><br><span class="line">        Set&lt;String&gt; visited = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        visited.add(endWord);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> step = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(queue1.size() &gt; <span class="number">0</span> &amp;&amp; queue2.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// always start from smaller number of queue </span></span><br><span class="line">            <span class="keyword">if</span>(queue1.size() &gt; queue2.size()) &#123;</span><br><span class="line">                Queue&lt;String&gt; temp = queue1;</span><br><span class="line">                queue1 = queue2;</span><br><span class="line">                queue2 = temp;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            Queue&lt;String&gt; nextQueue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">            <span class="keyword">while</span>(!queue1.isEmpty()) &#123;</span><br><span class="line">                String cur = queue1.poll();</span><br><span class="line">                <span class="keyword">for</span>(String word: wordList) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(valid(cur, word)) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(queue2.contains(word)) &#123;</span><br><span class="line">                            <span class="keyword">return</span> step+<span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        </span><br><span class="line">                        <span class="keyword">if</span>(!visited.contains(word)) &#123;</span><br><span class="line">                            nextQueue.add(word);</span><br><span class="line">                            visited.add(word);                            </span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            queue1 = nextQueue;</span><br><span class="line">            step++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//whether step==1</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">valid</span><span class="params">(String a, String b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> diff = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a.charAt(i) != b.charAt(i)) &#123;</span><br><span class="line">                diff++;</span><br><span class="line">                <span class="keyword">if</span>(diff &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="DP-DP-lt-–-gt-DFS-memo"><a href="#DP-DP-lt-–-gt-DFS-memo" class="headerlink" title="DP (DP&lt;–&gt;DFS + memo)"></a>DP (DP&lt;–&gt;DFS + memo)</h2><h3 id="53-Maximum-Subarray-Easy"><a href="#53-Maximum-Subarray-Easy" class="headerlink" title="53.Maximum Subarray (Easy) @"></a>53.Maximum Subarray (Easy) <a href="https://leetcode.com/problems/maximum-subarray/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Given an integer array <code>nums</code>, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: [-2,1,-3,4,-1,2,1,-5,4],</span><br><span class="line">&gt; Output: 6</span><br><span class="line">&gt; Explanation: [4,-1,2,1] has the largest sum = 6.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Follow up:</strong></p>
<p>If you have figured out the O(<em>n</em>) solution, try coding another solution using the divide and conquer approach, which is more subtle.</p>
</blockquote>
<p><strong>Solution 1</strong></p>
<ul>
<li>遍历所有子序列O(n^3) -&gt; 住需要遍历从起始位置开始的子序列 O(n^2) -&gt;</li>
<li>起始位置为负时，显然不是最大子序列和起始点。所以从负数部位最大子序列和的起点出发 O(n)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> nSize = nums.length;</span><br><span class="line">        <span class="keyword">if</span> (nSize == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> maxSum = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">int</span> nSum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nSize; i++) &#123;</span><br><span class="line">            nSum += nums[i];</span><br><span class="line">            <span class="keyword">if</span> (nSum &gt; maxSum)</span><br><span class="line">                maxSum = nSum;</span><br><span class="line">            <span class="keyword">if</span> (nSum &lt; <span class="number">0</span>)</span><br><span class="line">                nSum = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxSum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="62-Unique-Paths-Medium"><a href="#62-Unique-Paths-Medium" class="headerlink" title="62. Unique Paths (Medium) @"></a>62. Unique Paths (Medium) <a href="https://leetcode.com/problems/unique-paths/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>A robot is located at the top-left corner of a <em>m</em> x <em>n</em> grid (marked ‘Start’ in the diagram below).</p>
<p>The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked ‘Finish’ in the diagram below).</p>
<p>How many possible unique paths are there?</p>
<p><strong>Note:</strong> <em>m</em> and <em>n</em> will be at most 100.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: m = 3, n = 2</span><br><span class="line">&gt; Output: 3</span><br><span class="line">&gt; Explanation:</span><br><span class="line">&gt; From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:</span><br><span class="line">&gt; 1. Right -&gt; Right -&gt; Down</span><br><span class="line">&gt; 2. Right -&gt; Down -&gt; Right</span><br><span class="line">&gt; 3. Down -&gt; Right -&gt; Right</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>Solution 1</strong> </p>
<ul>
<li>dp[i] [j] = dp[i-1] [j] + dp[i] [j-1]</li>
<li>O(m*n)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//dp[i][j] = dp[i-1][j] + dp[i][j-1];</span></span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &gt; <span class="number">0</span>)</span><br><span class="line">                    dp[i][j] += dp[i-<span class="number">1</span>][j];</span><br><span class="line">                <span class="keyword">if</span> (j &gt; <span class="number">0</span>)</span><br><span class="line">                    dp[i][j] += dp[i][j-<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m-<span class="number">1</span>][n-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>Solution 2</strong></p>
<ul>
<li>空间复杂度 O(m*n) -&gt; O(n)</li>
<li>dp[j]: (0,0) -&gt; (i,j)</li>
<li>dp[j-1]表示dp[j]上方的值</li>
<li>dp[j] = dp[j] + dp[j-1]</li>
<li>一列一列更新，只保存一列的数据<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//dp[j]: num of paths from (0,0) to (i-1,j)</span></span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                dp[j] += dp[j-<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="70-Climbing-Stairs-Easy"><a href="#70-Climbing-Stairs-Easy" class="headerlink" title="70. Climbing Stairs (Easy) @"></a>70. Climbing Stairs (Easy) <a href="https://leetcode.com/problems/climbing-stairs/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>You are climbing a stair case. It takes <em>n</em> steps to reach to the top.</p>
<p>Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?</p>
<p><strong>Note:</strong> Given <em>n</em> will be a positive integer.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: 2</span><br><span class="line">&gt; Output: 2</span><br><span class="line">&gt; Explanation: There are two ways to climb to the top.</span><br><span class="line">&gt; 1. 1 step + 1 step</span><br><span class="line">&gt; 2. 2 steps</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: 3</span><br><span class="line">&gt; Output: 3</span><br><span class="line">&gt; Explanation: There are three ways to climb to the top.</span><br><span class="line">&gt; 1. 1 step + 1 step + 1 step</span><br><span class="line">&gt; 2. 1 step + 2 steps</span><br><span class="line">&gt; 3. 2 steps + 1 step</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Solution 1 DP</p>
<ul>
<li>假设梯子有n层，那么如何爬到第n层呢，因为每次只能怕1或2步，那么爬到第n层的方法要么是从第n-1层一步上来的，要不就是从n-2层2步上来的，所以递推公式非常容易的就得出了<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//dp[i] = dp[i-1] + dp[i-2];</span></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>Solution 2 Fibonacci Number<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> first = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> second = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> third = first + second;</span><br><span class="line">            first = second;</span><br><span class="line">            second = third;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> second;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="91-Decode-Ways-Medium"><a href="#91-Decode-Ways-Medium" class="headerlink" title="91. Decode Ways (Medium) @"></a>91. Decode Ways (Medium) <a href="https://leetcode.com/problems/decode-ways/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>A message containing letters from <code>A-Z</code> is being encoded to numbers using the following mapping:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; &apos;A&apos; -&gt; 1</span><br><span class="line">&gt; &apos;B&apos; -&gt; 2</span><br><span class="line">&gt; ...</span><br><span class="line">&gt; &apos;Z&apos; -&gt; 26</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p>Given a <strong>non-empty</strong> string containing only digits, determine the total number of ways to decode it.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: &quot;12&quot;</span><br><span class="line">&gt; Output: 2</span><br><span class="line">&gt; Explanation: It could be decoded as &quot;AB&quot; (1 2) or &quot;L&quot; (12).</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: &quot;226&quot;</span><br><span class="line">&gt; Output: 3</span><br><span class="line">&gt; Explanation: It could be decoded as &quot;BZ&quot; (2 26), &quot;VF&quot; (22 6), or &quot;BBF&quot; (2 2 6).</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>Solution</strong></p>
<ul>
<li><p>设定状态为：<code>dp[i]</code>表示<code>s</code>从<code>0</code>开始，长度为<code>i</code>的子串的解码方式数量，于是我们最终要求的答案便是<code>dp[n]</code>。</p>
<p>那么如何求解<code>dp[i]</code>呢？这个很简单，枚举最后一个字母对应1位还是2位，将f转化为规模更小的子问题。</p>
<ul>
<li>设<code>dp[i] = 0</code></li>
<li>枚举最后一个字母对应1位（要求<code>s[i - 1] != &#39;0&#39;</code>)，那么有<code>dp[i] += dp[i-1]</code>；</li>
<li>枚举最后一个字母对应2位（要求<code>i &gt; 1</code>且<code>s[i - 2]</code>和<code>s[i - 1]</code>组成的字符串在<code>&quot;10&quot;~&quot;26&quot;</code>的范围内），那么有<code>dp[i] += dp[i - 2]</code>；</li>
</ul>
</li>
<li><p>也就是说，我们可以通过dp[i - 1]和dp[i - 2]计算出dp[i]来，这就是我们的状态和转移方程。</p>
</li>
<li><p>在具体实现中，我们可以按照i从1到n的顺序，依次计算出所有的dp[i]。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numDecodings</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[s.length()+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//dp[i] 表示s从0开始，长度为i的字串的解码方式数量</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; s.length()+<span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i-<span class="number">1</span>) != <span class="string">'0'</span>) </span><br><span class="line">                dp[i] += dp[i-<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= <span class="number">2</span> &amp;&amp; (s.substring(i-<span class="number">2</span>, i).compareTo(<span class="string">"10"</span>) &gt;= <span class="number">0</span> &amp;&amp; s.substring(i-<span class="number">2</span>, i).compareTo(<span class="string">"26"</span>) &lt;= <span class="number">0</span>))</span><br><span class="line">                dp[i] += dp[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[s.length()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="121-Best-Time-to-Buy-and-Sell-Stock-Easy"><a href="#121-Best-Time-to-Buy-and-Sell-Stock-Easy" class="headerlink" title="121. Best Time to Buy and Sell Stock (Easy) @"></a>121. Best Time to Buy and Sell Stock (Easy) <a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock/" target="_blank" rel="noopener">@</a></h3><blockquote>
</blockquote>
<p><strong>Solution</strong></p>
<p>如果是动态规划的思路， 基本上我们要定义状态dp[i]， 然后看dp[i]和dp[i-1]或者dp[i-k]之间的关系。<br>假设我们定义dp[i]是在i天的最大利润， 那么和前面的重叠子问题的关系是什么呢？</p>
<ul>
<li>一种情况当然是前面子问题里面的最大利润已经是整体的最大利润， 那么dp[i]=dp[i-1]<br>还有一种情况是， 前面虽然取得了利润， 但是第i天卖出（对应到前面某一天买入)会产生更大的利润<br>这时候，dp[i] = prices[i] - prices[j]<br>也就是说, 整个递推公式是: dp[i] = Math.max(dp[i-1], prices[i]-prices[j]), 其中, j&lt;i<br>这样， 对于每个dp[i], 都只和之前的状态和数据有关， 和后面的选择已经无关了。<br>然后这时候要考虑， prices[j]是哪个值会产生最大利润？ 当然是目前为止的最小值。<br>也就是说， dp[j] = min prices so far， 而且这个值的好处是， 在一次遍历的过程中，可以直接随着遍历更新这个值。那么， 可以保存一个min值， 这样整体一次遍历就可以了。</li>
<li>有一个错误的思路， 就是一次遍历求出最小价格和最大价格， 然后得出利润。<br>这个解法的错误的地方在于， 最大价格可能是最小价格的前面， 不能直接使用。<br>反例比如[3,1,2]</li>
<li>前面的错误在于把顺序不符合要求的情况包括进去了，<br>当然， 这个过程可以更简化。 甚至可以不需要用这么复杂的动态规划的思路, 直接对问题进行分析。<br>对于最大利润的买入和卖出位置， 虽然买入和卖出可能出现在任意位置， 但是我们考虑如果固定其中一个价格会怎么样？<br>实际上， 如果买入的位置已经选中， 那么卖出的位置也确定了。 反过来也成立， 如果卖出的位置已经选择， 那么买入的位置也确定了。</li>
</ul>
<p>这里假设卖出的位置是i, 那么， 买入的位置就是在i前面的价格里面的最小价格。<br>那么，如果我们从左向右遍历， 每次保存目前已经遇到过的最小价格， 那么，prices[i]-min就是在i这个位置卖出的最大利润，这样就可以在一次遍历的过程中求解整体的最大利润。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int maxProfit(int[] prices) &#123;</span><br><span class="line">        if (prices.length == 0) return 0;</span><br><span class="line">        int[] dp = new int[prices.length];</span><br><span class="line">        int min = prices[0];</span><br><span class="line">        </span><br><span class="line">        for (int i = 1; i &lt; prices.length; i++) &#123;</span><br><span class="line">            min = Math.min(prices[i], min);</span><br><span class="line">            dp[i] = Math.max(dp[i-1], prices[i] - min);</span><br><span class="line">        &#125;</span><br><span class="line">        return dp[prices.length - 1];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>可将dp[]换为max，降低空间复杂度</li>
</ul>
<h3 id="139-Word-Break-Medium"><a href="#139-Word-Break-Medium" class="headerlink" title="139. Word Break (Medium) @"></a>139. Word Break (Medium) <a href="https://leetcode.com/problems/word-break/" target="_blank" rel="noopener">@</a></h3><p>Solution 1</p>
<ol>
<li>一个直观的思路是暴力解，首先从头开始，看看每个单词能不能成为成为字符串的开头， 如果匹配上了， 可以对后面的继续这个过程</li>
<li>但是这个过程有一点重复， 其实每次计算都是计算的时候，问题是判断某一个子字符串是不是满足要求， 而某一个子字符串，在这个问题里面其实就是原始字符串的index， 那么， 这个子问题可能是重叠的。<br>比如， 针对”abcdef”和[“ab”, “cd”, “abcd”]<br>那么， 针对index=4 （从1开始计数， 可以有ab+cd 或者abcd两种方式， 那么，一个计算过了，后面的就不需要再计算了。</li>
<li>这样，就可以应用动态规划的思想， 设置dp[i]表示在i位已经满足要求的， 然后从前向后遍历，看看每一位是否可以走到更多的位；</li>
<li>动态规划的常用套路，就是看prefix， 因为计算prefix的时候，问题已经求解过了，固定了； 当然要从postfix去理解也可以， 但是那样通常会是解问题的自然思路，但是从动态规划bottom up的方式，往往不是那么好理解。<br>而当然，如果用记忆化递归的方式去理解，也是可以的。 但是同样要抽象出需要记忆的状态。 对于每个substring， 其实也是要用index来定义状态。 当然，完全用string做key也可能可以， 但是那样会浪费很多空间。</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wordBreak</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; wordSet = <span class="keyword">new</span> HashSet&lt;&gt;(wordDict);</span><br><span class="line">        <span class="keyword">boolean</span>[] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[s.length() + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//i--开始位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!dp[i]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">//j--结束位置</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt;= s.length(); j++) &#123;</span><br><span class="line">                String subStr = s.substring(i, j);</span><br><span class="line">                <span class="keyword">if</span> (wordSet.contains(subStr)) &#123;</span><br><span class="line">                    dp[j] = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[s.length()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="140-Word-Break-II-Hard"><a href="#140-Word-Break-II-Hard" class="headerlink" title="140. Word Break II (Hard) @"></a>140. Word Break II (Hard) <a href="https://leetcode.com/problems/word-break-ii/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Given a <strong>non-empty</strong> string <em>s</em> and a dictionary <em>wordDict</em> containing a list of <strong>non-empty</strong> words, add spaces in <em>s</em> to construct a sentence where each word is a valid dictionary word. Return all such possible sentences.</p>
<p><strong>Note:</strong></p>
<ul>
<li>The same word in the dictionary may be reused multiple times in the segmentation.</li>
<li>You may assume the dictionary does not contain duplicate words.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input:</span><br><span class="line">&gt; s = &quot;catsanddog&quot;</span><br><span class="line">&gt; wordDict = [&quot;cat&quot;, &quot;cats&quot;, &quot;and&quot;, &quot;sand&quot;, &quot;dog&quot;]</span><br><span class="line">&gt; Output:</span><br><span class="line">&gt; [</span><br><span class="line">&gt;   &quot;cats and dog&quot;,</span><br><span class="line">&gt;   &quot;cat sand dog&quot;</span><br><span class="line">&gt; ]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input:</span><br><span class="line">&gt; s = &quot;pineapplepenapple&quot;</span><br><span class="line">&gt; wordDict = [&quot;apple&quot;, &quot;pen&quot;, &quot;applepen&quot;, &quot;pine&quot;, &quot;pineapple&quot;]</span><br><span class="line">&gt; Output:</span><br><span class="line">&gt; [</span><br><span class="line">&gt;   &quot;pine apple pen apple&quot;,</span><br><span class="line">&gt;   &quot;pineapple pen apple&quot;,</span><br><span class="line">&gt;   &quot;pine applepen apple&quot;</span><br><span class="line">&gt; ]</span><br><span class="line">&gt; Explanation: Note that you are allowed to reuse a dictionary word.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input:</span><br><span class="line">&gt; s = &quot;catsandog&quot;</span><br><span class="line">&gt; wordDict = [&quot;cats&quot;, &quot;dog&quot;, &quot;sand&quot;, &quot;and&quot;, &quot;cat&quot;]</span><br><span class="line">&gt; Output:</span><br><span class="line">&gt; []</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Solution Recursion</p>
<ul>
<li>Python</li>
<li>递归调用wordBerak()</li>
<li><a href="https://www.youtube.com/watch?v=JqOIRBC0_9c" target="_blank" rel="noopener">Youtube 题解</a></li>
<li><img src=":/ce516b8d2d2e441d9d46426147b9d38c" alt="leetcode_140.png"></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wordBreak</span><span class="params">(self, s: str, wordDict: List[str])</span> -&gt; List[str]:</span></span><br><span class="line">        words = set(wordDict)</span><br><span class="line">        memo = &#123;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wordBreak</span><span class="params">(s)</span>:</span></span><br><span class="line">            <span class="comment"># already in memory, return directly</span></span><br><span class="line">            <span class="keyword">if</span> s <span class="keyword">in</span> memo: </span><br><span class="line">                <span class="keyword">return</span> memo[s]</span><br><span class="line">            <span class="comment"># answer for s</span></span><br><span class="line">            ans = []</span><br><span class="line">            <span class="keyword">if</span> s <span class="keyword">in</span> words:</span><br><span class="line">                ans.append(s)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(s)):</span><br><span class="line">                <span class="comment"># check whether right part is a word</span></span><br><span class="line">                right = s[i:]</span><br><span class="line">                <span class="keyword">if</span> right <span class="keyword">not</span> <span class="keyword">in</span> words:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="comment"># append to the answer for left part</span></span><br><span class="line">                ans += [w + <span class="string">" "</span> + right <span class="keyword">for</span> w <span class="keyword">in</span> wordBreak(s[<span class="number">0</span>:i])]</span><br><span class="line">            memo[s] = ans</span><br><span class="line">            <span class="keyword">return</span> memo[s]</span><br><span class="line">        <span class="keyword">return</span> wordBreak(s)</span><br></pre></td></tr></table></figure>
<h3 id="152-Maximum-Product-Subarray-Medium"><a href="#152-Maximum-Product-Subarray-Medium" class="headerlink" title="152. Maximum Product Subarray (Medium) @"></a>152. Maximum Product Subarray (Medium) <a href="https://leetcode.com/problems/maximum-product-subarray/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Given an integer array <code>nums</code>, find the contiguous subarray within an array (containing at least one number) which has the largest product.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: [2,3,-2,4]</span><br><span class="line">&gt; Output: 6</span><br><span class="line">&gt; Explanation: [2,3] has the largest product 6.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: [-2,0,-1]</span><br><span class="line">&gt; Output: 0</span><br><span class="line">&gt; Explanation: The result cannot be 2, because [-2,-1] is not a subarray.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Solution DP</p>
<ul>
<li>同时记录最大积和最小积，dp[i][0]表示以nums[i]结尾的子序列的最小积，dp[i][1]表示以nums[i]结尾的子序列的最大积。初始状态：<br>dp[0] [0] = nums[0];<br>dp[0] [1] = nums[0];</li>
<li>由于可能存在负数，所以有三个数参与判断，状态转移方程：<br>dp[i] [0] = min( min(dp[i - 1] [0] <em> nums[i], dp[i - 1] [1] </em> nums[i]), nums[i])<br>dp[i] [1] = max( max(dp[i - 1] [0] <em> nums[i], dp[i - 1] [1] </em> nums[i]), nums[i])</li>
<li>可以在用一个变量result记录结果，每次计算出最大积时就更新一下result，最后返回result就行，见下面我的代码1，时间复杂度是O(n)O(n)，空间复杂度是O(n)O(n)</li>
<li>通过状态转移方程可以看出计算dp[i] []时只需要用到dp[i - 1] []，与dp[i - 2] []及前面的结果没有关系，因此空间复杂度可以进一步优化，只用两个变量localMin和localMax存储前一个位置的最大积和最小积</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProduct</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> localMin = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> localMax = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> globalMax = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = localMin;</span><br><span class="line">            localMin = Math.min(Math.min(tmp * nums[i], localMax * nums[i]), nums[i]);</span><br><span class="line">            localMax = Math.max(Math.max(localMax * nums[i], tmp * nums[i]), nums[i]);</span><br><span class="line">            globalMax = Math.max(localMax, globalMax);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> globalMax;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="198-House-Robber-Easy"><a href="#198-House-Robber-Easy" class="headerlink" title="198.House Robber (Easy) @"></a>198.House Robber (Easy) <a href="https://leetcode.com/problems/house-robber/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and <strong>it will automatically contact the police if two adjacent houses were broken into on the same night</strong>.</p>
<p>Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight <strong>without alerting the police</strong>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: [1,2,3,1]</span><br><span class="line">&gt; Output: 4</span><br><span class="line">&gt; Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).</span><br><span class="line">&gt;           Total amount you can rob = 1 + 3 = 4.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: [2,7,9,3,1]</span><br><span class="line">&gt; Output: 12</span><br><span class="line">&gt; Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).</span><br><span class="line">&gt;           Total amount you can rob = 2 + 9 + 1 = 12.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Solution 1 DP</p>
<ul>
<li>递推公式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dp[0] = num[0] （当i=0时）</span><br><span class="line">dp[1] = max(num[0], num[1]) （当i=1时）</span><br><span class="line">dp[i] = max(num[i] + dp[i - 2], dp[i - 1])   （当i !=0 and i != 1时）</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) </span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">                dp[i] = nums[i];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">1</span>)</span><br><span class="line">                dp[i] = Math.max(nums[i], nums[i-<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                dp[i] = Math.max(dp[i-<span class="number">2</span>]+nums[i], dp[i-<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[nums.length-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Solution 2</p>
<ul>
<li>优化空间复杂度 O(1)</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rob = <span class="number">0</span>, notrob = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = rob;</span><br><span class="line">        rob = notrob + nums[i];</span><br><span class="line">        notrob = Math.max(temp, notrob);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Math.max(rob, notrob);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Binary-Search"><a href="#Binary-Search" class="headerlink" title="Binary Search"></a>Binary Search</h2><h3 id="69-Sqrt-x-Easy"><a href="#69-Sqrt-x-Easy" class="headerlink" title="69. Sqrt(x) (Easy) @"></a>69. Sqrt(x) (Easy) <a href="https://leetcode.com/problems/sqrtx/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Implement <code>int sqrt(int x)</code>.</p>
<p>Compute and return the square root of <em>x</em>, where <em>x</em> is guaranteed to be a non-negative integer.</p>
<p>Since the return type is an integer, the decimal digits are truncated and only the integer part of the result is returned.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: 4</span><br><span class="line">&gt; Output: 2</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: 8</span><br><span class="line">&gt; Output: 2</span><br><span class="line">&gt; Explanation: The square root of 8 is 2.82842..., and since </span><br><span class="line">&gt;           the decimal part is truncated, 2 is returned.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int mySqrt(int x) &#123;</span><br><span class="line">        if (x &lt; 2) return x;</span><br><span class="line">        int left = 0;</span><br><span class="line">        int right = x/2+1;</span><br><span class="line">        long mid = 0;</span><br><span class="line">        while (left &lt;= right) &#123;</span><br><span class="line">            mid = (left + right) / 2;</span><br><span class="line">            if (mid * mid == x) &#123;</span><br><span class="line">                return (int)mid;</span><br><span class="line">            &#125;else if (mid * mid &gt; x) &#123;</span><br><span class="line">                right = (int)mid -1;</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                left = (int)mid + 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="162-Find-Peak-Element-Medium"><a href="#162-Find-Peak-Element-Medium" class="headerlink" title="162. Find Peak Element (Medium) @"></a>162. Find Peak Element (Medium) <a href="https://leetcode.com/problems/find-peak-element/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>A peak element is an element that is greater than its neighbors.</p>
<p>Given an input array <code>nums</code>, where <code>nums[i] ≠ nums[i+1]</code>, find a peak element and return its index.</p>
<p>The array may contain multiple peaks, in that case return the index to any one of the peaks is fine.</p>
<p>You may imagine that <code>nums[-1] = nums[n] = -∞</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: nums = [1,2,3,1]</span><br><span class="line">&gt; Output: 2</span><br><span class="line">&gt; Explanation: 3 is a peak element and your function should return the index number 2.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: nums = [1,2,1,3,5,6,4]</span><br><span class="line">&gt; Output: 1 or 5 </span><br><span class="line">&gt; Explanation: Your function can return either index number 1 where the peak element is 2, </span><br><span class="line">&gt;           or index number 5 where the peak element is 6.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Solution</p>
<ul>
<li>因为nums[-1] = nums[n] = -∞, 所以当nums[mid] &lt; nums[mid+1] 时，mid右侧必定有peak，同理点那个nums[mid] &gt;= nums[mid+1]时，mid及其左侧必有peak<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int findPeakElement(int[] nums) &#123;</span><br><span class="line">        int n = nums.length;</span><br><span class="line">        int left = 0, right = n-1;</span><br><span class="line">        while (left &lt; right) &#123;</span><br><span class="line">            int mid = (left + right) / 2;</span><br><span class="line">            if (nums[mid] &lt; nums[mid+1]) &#123;</span><br><span class="line">                //mid右侧必定有peak</span><br><span class="line">                left = mid + 1;</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                //包括mid在内左侧必有peak</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Greedy"><a href="#Greedy" class="headerlink" title="Greedy"></a>Greedy</h2><h3 id="55-Jump-Game-Medium"><a href="#55-Jump-Game-Medium" class="headerlink" title="55. Jump Game (Medium) @"></a>55. Jump Game (Medium) <a href="https://leetcode.com/problems/jump-game/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Given an array of non-negative integers, you are initially positioned at the first index of the array.</p>
<p>Each element in the array represents your maximum jump length at that position.</p>
<p>Determine if you are able to reach the last index.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: [2,3,1,1,4]</span><br><span class="line">&gt; Output: true</span><br><span class="line">&gt; Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: [3,2,1,0,4]</span><br><span class="line">&gt; Output: false</span><br><span class="line">&gt; Explanation: You will always arrive at index 3 no matter what. Its maximum</span><br><span class="line">&gt;           jump length is 0, which makes it impossible to reach the last index.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Solution 1 Greedy</p>
<ul>
<li>维护一个reach（最远可达距离），每次前进一步，如果i一直在reach范围内，则可达<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public boolean canJump(int[] nums) &#123;</span><br><span class="line">        int reach = 0;</span><br><span class="line">        for (int i = 0; i &lt; nums.length; i++) &#123;</span><br><span class="line">            if (i &gt; reach)</span><br><span class="line">                return false;</span><br><span class="line">            reach = Math.max(reach, i + nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>Solution 2 Zero Point</p>
<ul>
<li>若无0点则一定可达任一点</li>
<li>故只需考虑0点，判断可否跳过此0点即此0点向前数第k个位置的元素大于k即可跳过<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public boolean canJump(int[] nums) &#123;</span><br><span class="line">        int i = nums.length - 2; //0点</span><br><span class="line">        while(i &gt;= 0) &#123;</span><br><span class="line">            if (nums[i] == 0) &#123;</span><br><span class="line">                int j = i - 1;//向前找可以跳过0点的位置</span><br><span class="line">                while (j &gt;= 0) &#123;</span><br><span class="line">                    if (j + nums[j] &gt; i) &#123;</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                    j--;</span><br><span class="line">                &#125;</span><br><span class="line">                if (j == -1)</span><br><span class="line">                    return false;</span><br><span class="line">            &#125;</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="122-Best-Time-to-Buy-and-Sell-Stock-II-Easy"><a href="#122-Best-Time-to-Buy-and-Sell-Stock-II-Easy" class="headerlink" title="122. Best Time to Buy and Sell Stock II (Easy) @"></a>122. Best Time to Buy and Sell Stock II (Easy) <a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Say you have an array for which the <em>i</em>th element is the price of a given stock on day <em>i</em>.</p>
<p>Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).</p>
<p><strong>Note:</strong> You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: [7,1,5,3,6,4]</span><br><span class="line">&gt; Output: 7</span><br><span class="line">&gt; Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.</span><br><span class="line">&gt;           Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: [1,2,3,4,5]</span><br><span class="line">&gt; Output: 4</span><br><span class="line">&gt; Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.</span><br><span class="line">&gt;           Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are</span><br><span class="line">&gt;           engaging multiple transactions at the same time. You must sell before buying again.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: [7,6,4,3,1]</span><br><span class="line">&gt; Output: 0</span><br><span class="line">&gt; Explanation: In this case, no transaction is done, i.e. max profit = 0.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Solution Greedy</p>
<ul>
<li>累计所有前低后高的差值<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int maxProfit(int[] prices) &#123;</span><br><span class="line">        int profit = 0;</span><br><span class="line">        for (int i = 1; i &lt; prices.length; i++) &#123;</span><br><span class="line">            if (prices[i] - prices[i-1] &gt; 0)</span><br><span class="line">                profit += prices[i] - prices[i-1];</span><br><span class="line">        &#125;</span><br><span class="line">        return profit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="134-Gas-Station-Medium"><a href="#134-Gas-Station-Medium" class="headerlink" title="134. Gas Station (Medium) @"></a>134. Gas Station (Medium) <a href="https://leetcode.com/problems/gas-station/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>There are <em>N</em> gas stations along a circular route, where the amount of gas at station <em>i</em> is <code>gas[i]</code>.</p>
<p>You have a car with an unlimited gas tank and it costs <code>cost[i]</code> of gas to travel from station <em>i</em> to its next station (<em>i</em>+1). You begin the journey with an empty tank at one of the gas stations.</p>
<p>Return the starting gas station’s index if you can travel around the circuit once in the clockwise direction, otherwise return -1.</p>
<p><strong>Note:</strong></p>
<ul>
<li>If there exists a solution, it is guaranteed to be unique.</li>
<li>Both input arrays are non-empty and have the same length.</li>
<li>Each element in the input arrays is a non-negative integer.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: </span><br><span class="line">&gt; gas  = [1,2,3,4,5]</span><br><span class="line">&gt; cost = [3,4,5,1,2]</span><br><span class="line">&gt; </span><br><span class="line">&gt; Output: 3</span><br><span class="line">&gt; </span><br><span class="line">&gt; Explanation:</span><br><span class="line">&gt; Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4</span><br><span class="line">&gt; Travel to station 4. Your tank = 4 - 1 + 5 = 8</span><br><span class="line">&gt; Travel to station 0. Your tank = 8 - 2 + 1 = 7</span><br><span class="line">&gt; Travel to station 1. Your tank = 7 - 3 + 2 = 6</span><br><span class="line">&gt; Travel to station 2. Your tank = 6 - 4 + 3 = 5</span><br><span class="line">&gt; Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.</span><br><span class="line">&gt; Therefore, return 3 as the starting index.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: </span><br><span class="line">&gt; gas  = [2,3,4]</span><br><span class="line">&gt; cost = [3,4,3]</span><br><span class="line">&gt; </span><br><span class="line">&gt; Output: -1</span><br><span class="line">&gt; </span><br><span class="line">&gt; Explanation:</span><br><span class="line">&gt; You can&apos;t start at station 0 or 1, as there is not enough gas to travel to the next station.</span><br><span class="line">&gt; Let&apos;s start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4</span><br><span class="line">&gt; Travel to station 0. Your tank = 4 - 3 + 2 = 3</span><br><span class="line">&gt; Travel to station 1. Your tank = 3 - 3 + 3 = 3</span><br><span class="line">&gt; You cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.</span><br><span class="line">&gt; Therefore, you can&apos;t travel around the circuit once no matter where you start.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Solution Greedy</p>
<ul>
<li>sum(gas) &gt;= sum(cost) =&gt; 有解</li>
<li>只要找到一个起点i，从这个点出发的所有gas的和总比cost和打即可<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int canCompleteCircuit(int[] gas, int[] cost) &#123;</span><br><span class="line">        int sum = 0, subsum = 0, begin = 0;</span><br><span class="line">        for (int i = 0; i &lt; gas.length; i++) &#123;</span><br><span class="line">            sum += gas[i] - cost[i];</span><br><span class="line">            subsum += gas[i] - cost[i];</span><br><span class="line">            if (subsum &lt; 0) &#123;</span><br><span class="line">                subsum = 0;</span><br><span class="line">                begin = i + 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (sum &lt; 0) return -1;</span><br><span class="line">        return begin;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Tree"><a href="#Tree" class="headerlink" title="Tree"></a>Tree</h2><h3 id="94-Binary-Tree-Inorder-Traversal-Medium"><a href="#94-Binary-Tree-Inorder-Traversal-Medium" class="headerlink" title="94. Binary Tree Inorder Traversal (Medium)  @"></a>94. Binary Tree Inorder Traversal (Medium)  <a href="https://leetcode.com/problems/binary-tree-inorder-traversal/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Given a binary tree, return the <em>inorder</em> traversal of its nodes’ values.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: [1,null,2,3]</span><br><span class="line">&gt; 1</span><br><span class="line">&gt;  \</span><br><span class="line">&gt;   2</span><br><span class="line">&gt;  /</span><br><span class="line">&gt; 3</span><br><span class="line">&gt; </span><br><span class="line">&gt; Output: [1,3,2]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Follow up:</strong> Recursive solution is trivial, could you do it iteratively?</p>
</blockquote>
<p>Solution 1 Recursion</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        helper(root, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(TreeNode root, List&lt;Integer&gt; res)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (root.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                helper(root.left, res);</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(root.val);</span><br><span class="line">            <span class="keyword">if</span> (root.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                helper(root.right, res);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Solution 2 Stack</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        TreeNode cur = root;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span> || !stack.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">                stack.push(cur);</span><br><span class="line">                cur = cur.left;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = stack.pop();</span><br><span class="line">            res.add(cur.val);</span><br><span class="line">            cur = cur.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Backtracking"><a href="#Backtracking" class="headerlink" title="Backtracking"></a>Backtracking</h2><h3 id="78-Subsets-Medium"><a href="#78-Subsets-Medium" class="headerlink" title="78. Subsets (Medium) @"></a>78. Subsets (Medium) <a href="https://leetcode.com/problems/subsets/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Given a set of <strong>distinct</strong> integers, <em>nums</em>, return all possible subsets (the power set).</p>
<p><strong>Note:</strong> The solution set must not contain duplicate subsets.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: nums = [1,2,3]</span><br><span class="line">&gt; Output:</span><br><span class="line">&gt; [</span><br><span class="line">&gt; [3],</span><br><span class="line">&gt; [1],</span><br><span class="line">&gt; [2],</span><br><span class="line">&gt; [1,2,3],</span><br><span class="line">&gt; [1,3],</span><br><span class="line">&gt; [2,3],</span><br><span class="line">&gt; [1,2],</span><br><span class="line">&gt; []</span><br><span class="line">&gt; ]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Solution 1 Recursion<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsets(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; cur = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        backtrack(res, cur, nums, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; cur, <span class="keyword">int</span>[] nums, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        res.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(cur));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = j; i &lt; nums.length; i++) &#123;</span><br><span class="line">            cur.add(nums[i]);<span class="comment">//add nums[i]</span></span><br><span class="line">            backtrack(res, cur, nums, i+<span class="number">1</span>);<span class="comment">// Recursion</span></span><br><span class="line">            cur.remove(cur.size()-<span class="number">1</span>);<span class="comment">//remove nums[i]</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Solution 2 Iteration<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsets(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">        res.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123; <span class="comment">//pick up each element from nums</span></span><br><span class="line">            <span class="keyword">int</span> size = res.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="comment">//pick up each element in current res</span></span><br><span class="line">                List&lt;Integer&gt; temp = <span class="keyword">new</span> ArrayList&lt;Integer&gt;(res.get(i));</span><br><span class="line">                temp.add(num);<span class="comment">//put num into temp</span></span><br><span class="line">                res.add(temp);<span class="comment">//add temp into res</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="79-Word-Search-Medium"><a href="#79-Word-Search-Medium" class="headerlink" title="79. Word Search (Medium) @"></a>79. Word Search (Medium) <a href="https://leetcode.com/problems/word-search/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Given a 2D board and a word, find if the word exists in the grid.</p>
<p>The word can be constructed from letters of sequentially adjacent cell, where “adjacent” cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; board =</span><br><span class="line">&gt; [</span><br><span class="line">&gt; [&apos;A&apos;,&apos;B&apos;,&apos;C&apos;,&apos;E&apos;],</span><br><span class="line">&gt; [&apos;S&apos;,&apos;F&apos;,&apos;C&apos;,&apos;S&apos;],</span><br><span class="line">&gt; [&apos;A&apos;,&apos;D&apos;,&apos;E&apos;,&apos;E&apos;]</span><br><span class="line">&gt; ]</span><br><span class="line">&gt; </span><br><span class="line">&gt; Given word = &quot;ABCCED&quot;, return true.</span><br><span class="line">&gt; Given word = &quot;SEE&quot;, return true.</span><br><span class="line">&gt; Given word = &quot;ABCB&quot;, return false.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Solution dfs + backtrack<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//direction: right, down, left, up</span></span><br><span class="line">    <span class="keyword">int</span>[] drow = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span>[] dcol = &#123;<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exist</span><span class="params">(<span class="keyword">char</span>[][] board, String word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span>[][] isVisited = <span class="keyword">new</span> <span class="keyword">boolean</span>[board.length][board[<span class="number">0</span>].length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; board.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; board[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (isThisWay(board, word, i, j, <span class="number">0</span>, isVisited))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isThisWay</span><span class="params">(<span class="keyword">char</span>[][] board, String word, <span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> index, <span class="keyword">boolean</span>[][] isVisited)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (row &lt; <span class="number">0</span> || row &gt;= board.length || col &lt; <span class="number">0</span> || col &gt;= board[<span class="number">0</span>].length || isVisited[row][col] || board[row][col] != word.charAt(index))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (++index == word.length())</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">// complete matching</span></span><br><span class="line">        isVisited[row][col] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isThisWay(board, word, row + drow[i], col + dcol[i], index, isVisited))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        isVisited[row][col] = <span class="keyword">false</span>;<span class="comment">//backtrack if false</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="131-Palindrome-Partitioning-Medium"><a href="#131-Palindrome-Partitioning-Medium" class="headerlink" title="131. Palindrome Partitioning (Medium) @"></a>131. Palindrome Partitioning (Medium) <a href="https://leetcode.com/problems/palindrome-partitioning/" target="_blank" rel="noopener">@</a></h3><p>Solution DFS + backtracking</p>
<ul>
<li>递归寻找子问题，如果子串回文，则加入res<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; partition(String s) &#123;</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;List&lt;String&gt;&gt;();</span><br><span class="line">        List&lt;String&gt; cur = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">if</span> (s.length() == <span class="number">0</span> || s == <span class="keyword">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">        backtrack(s, <span class="number">0</span>, cur, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(String s, <span class="keyword">int</span> start, List&lt;String&gt; cur, List&lt;List&lt;String&gt;&gt; res)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//recursion complete condition</span></span><br><span class="line">        <span class="keyword">if</span> (start == s.length()) &#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;String&gt;(cur));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; s.length(); i++) &#123;</span><br><span class="line">            String str = s.substring(start, i + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (isPalindrome(str)) &#123;</span><br><span class="line">                cur.add(str);</span><br><span class="line">                backtrack(s, i+<span class="number">1</span>, cur, res);</span><br><span class="line">                cur.remove(cur.size()-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = str.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str.charAt(left) != str.charAt(right)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="212-Word-Search-II-Hard"><a href="#212-Word-Search-II-Hard" class="headerlink" title="212. Word Search II (Hard) @"></a>212. Word Search II (Hard) <a href="https://leetcode.com/problems/word-search-ii/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Given a 2D board and a list of words from the dictionary, find all words in the board.</p>
<p>Each word must be constructed from letters of sequentially adjacent cell, where “adjacent” cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: </span><br><span class="line">&gt; board = [</span><br><span class="line">&gt; [&apos;o&apos;,&apos;a&apos;,&apos;a&apos;,&apos;n&apos;],</span><br><span class="line">&gt; [&apos;e&apos;,&apos;t&apos;,&apos;a&apos;,&apos;e&apos;],</span><br><span class="line">&gt; [&apos;i&apos;,&apos;h&apos;,&apos;k&apos;,&apos;r&apos;],</span><br><span class="line">&gt; [&apos;i&apos;,&apos;f&apos;,&apos;l&apos;,&apos;v&apos;]</span><br><span class="line">&gt; ]</span><br><span class="line">&gt; words = [&quot;oath&quot;,&quot;pea&quot;,&quot;eat&quot;,&quot;rain&quot;]</span><br><span class="line">&gt; </span><br><span class="line">&gt; Output: [&quot;eat&quot;,&quot;oath&quot;]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Note:</strong></p>
<ol>
<li>All inputs are consist of lowercase letters <code>a-z</code>.</li>
<li>The values of <code>words</code> are distinct.</li>
</ol>
</blockquote>
<p><a href="https://www.cnblogs.com/Dylan-Java-NYC/p/4944555.html" target="_blank" rel="noopener">Solution</a> Tire + DFS</p>
<blockquote>
<p><a href="http://www.cnblogs.com/Dylan-Java-NYC/p/4944270.html" target="_blank" rel="noopener">Word Search</a>的进阶版题目，同时可以利用<a href="http://www.cnblogs.com/Dylan-Java-NYC/p/4888830.html" target="_blank" rel="noopener">Implement Trie (Prefix Tree)</a>.</p>
<p>生成Trie树，把所有的词都insert进去。</p>
<p>然后从board上的每一个char开始dfs查找。</p>
<p>终止条件有两个， 一个 i 和 j 出界，或者board[i][j]已经用过了. 另一个是把board[i][j]加到当前item后，若没有以更新过item为prefix的时候就可以返回了.</p>
<p>search 更新过的item, 若是有就加到res中, <strong>并且继续，这里不能return,</strong> 因为有可能有 “aabc” “aabcb”两个词同时存在的情况，只检查了”aabc”就return会漏掉”aabcb”.</p>
<p>标记当前used为true, 然后board四个方向都做recursion. used再改回来.</p>
<p>Note: 如果board 是[a a], words 只有一个[a], 此时小心重复加了，所以要用HashSet生成res, 最后再用res生成的List返回。</p>
<p>m = board.length, n = board[0].length, k = words.length, l 是 word的平均长度.</p>
<p>Time Complexity: O(k<em>l + m</em>n<em>l</em>4^l). k<em>l是简历Trie用时间. m</em>n是外部循环, l是search Trie时间, 4^l是recursion + backtracking的时间.</p>
<p>Space: O(k<em>l + l). k</em>l是Trie数的大小. 用了l层stack.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">findWords</span><span class="params">(<span class="keyword">char</span>[][] board, String[] words)</span> </span>&#123;</span><br><span class="line">        HashSet&lt;String&gt; res = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">        <span class="keyword">if</span>(words == <span class="keyword">null</span> || words.length == <span class="number">0</span> || board == <span class="keyword">null</span> || board.length == <span class="number">0</span> || board[<span class="number">0</span>].length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList(res);</span><br><span class="line">        &#125;</span><br><span class="line">        Trie trie = <span class="keyword">new</span> Trie();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;words.length; i++)&#123;</span><br><span class="line">            trie.insert(words[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">boolean</span> [][] used = <span class="keyword">new</span> <span class="keyword">boolean</span>[board.length][board[<span class="number">0</span>].length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;board.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;board[<span class="number">0</span>].length; j++)&#123;</span><br><span class="line">                findHelper(board,trie,used,<span class="string">""</span>,i,j,res);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList(res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">findHelper</span><span class="params">(<span class="keyword">char</span>[][] board, Trie trie, <span class="keyword">boolean</span> [][] used, String item, <span class="keyword">int</span> i, <span class="keyword">int</span> j, HashSet&lt;String&gt; res)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span> || j&lt;<span class="number">0</span> || i&gt;= board.length || j&gt;=board[<span class="number">0</span>].length || used[i][j])&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        item = item+board[i][j];</span><br><span class="line">        <span class="keyword">if</span>(!trie.startsWith(item))&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(trie.search(item))&#123;</span><br><span class="line">            res.add(item);</span><br><span class="line">        &#125;</span><br><span class="line">        used[i][j] = <span class="keyword">true</span>;</span><br><span class="line">        findHelper(board,trie,used,item,i+<span class="number">1</span>,j,res);</span><br><span class="line">        findHelper(board,trie,used,item,i-<span class="number">1</span>,j,res);</span><br><span class="line">        findHelper(board,trie,used,item,i,j+<span class="number">1</span>,res);</span><br><span class="line">        findHelper(board,trie,used,item,i,j-<span class="number">1</span>,res);</span><br><span class="line">        used[i][j] = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span></span>&#123;</span><br><span class="line">    String val = <span class="string">""</span>;</span><br><span class="line">    TrieNode [] nexts;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TrieNode</span><span class="params">()</span></span>&#123;</span><br><span class="line">        nexts = <span class="keyword">new</span> TrieNode[<span class="number">26</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> TrieNode root;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Trie</span><span class="params">()</span></span>&#123;</span><br><span class="line">        root = <span class="keyword">new</span> TrieNode();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(String word)</span></span>&#123;</span><br><span class="line">        TrieNode p = root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c : word.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span>(p.nexts[c-<span class="string">'a'</span>] == <span class="keyword">null</span>)&#123;</span><br><span class="line">                p.nexts[c-<span class="string">'a'</span>] = <span class="keyword">new</span> TrieNode();</span><br><span class="line">            &#125;</span><br><span class="line">            p = p.nexts[c-<span class="string">'a'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        p.val = word;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(String word)</span></span>&#123;</span><br><span class="line">        TrieNode p = root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c : word.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span>(p.nexts[c-<span class="string">'a'</span>] == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p = p.nexts[c-<span class="string">'a'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p.val.equals(word);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">startsWith</span><span class="params">(String prefix)</span></span>&#123;</span><br><span class="line">        TrieNode p = root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c : prefix.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span>(p.nexts[c-<span class="string">'a'</span>] == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p = p.nexts[c-<span class="string">'a'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><h3 id="12-Integer-to-Roman-Easy"><a href="#12-Integer-to-Roman-Easy" class="headerlink" title="12. Integer to Roman (Easy) @"></a>12. Integer to Roman (Easy) <a href="https://leetcode.com/problems/integer-to-roman/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Roman numerals are represented by seven different symbols: <code>I</code>, <code>V</code>, <code>X</code>, <code>L</code>, <code>C</code>, <code>D</code> and <code>M</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; Symbol       Value</span><br><span class="line">&gt; I             1</span><br><span class="line">&gt; V             5</span><br><span class="line">&gt; X             10</span><br><span class="line">&gt; L             50</span><br><span class="line">&gt; C             100</span><br><span class="line">&gt; D             500</span><br><span class="line">&gt; M             1000</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p>For example, two is written as <code>II</code> in Roman numeral, just two one’s added together. Twelve is written as, <code>XII</code>, which is simply <code>X</code> + <code>II</code>. The number twenty seven is written as <code>XXVII</code>, which is <code>XX</code> + <code>V</code> + <code>II</code>.</p>
<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not <code>IIII</code>. Instead, the number four is written as <code>IV</code>. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as <code>IX</code>. There are six instances where subtraction is used:</p>
<ul>
<li><code>I</code> can be placed before <code>V</code> (5) and <code>X</code> (10) to make 4 and 9. </li>
<li><code>X</code> can be placed before <code>L</code> (50) and <code>C</code> (100) to make 40 and 90. </li>
<li><code>C</code> can be placed before <code>D</code> (500) and <code>M</code> (1000) to make 400 and 900.</li>
</ul>
<p>Given an integer, convert it to a roman numeral. Input is guaranteed to be within the range from 1 to 3999.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: 3</span><br><span class="line">&gt; Output: &quot;III&quot;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: 4</span><br><span class="line">&gt; Output: &quot;IV&quot;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: 9</span><br><span class="line">&gt; Output: &quot;IX&quot;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 4:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: 58</span><br><span class="line">&gt; Output: &quot;LVIII&quot;</span><br><span class="line">&gt; Explanation: L = 50, V = 5, III = 3.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Solution</p>
<ul>
<li>计算每个位的值，并用对应字符串表示</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">intToRoman</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        String[] M = &#123;<span class="string">""</span>, <span class="string">"M"</span>, <span class="string">"MM"</span>, <span class="string">"MMM"</span>&#125;;</span><br><span class="line">        String[] C = &#123;<span class="string">""</span>, <span class="string">"C"</span>, <span class="string">"CC"</span>, <span class="string">"CCC"</span>, <span class="string">"CD"</span>, <span class="string">"D"</span>, <span class="string">"DC"</span>, <span class="string">"DCC"</span>, <span class="string">"DCCC"</span>, <span class="string">"CM"</span>&#125;;</span><br><span class="line">        String[] X = &#123;<span class="string">""</span>, <span class="string">"X"</span>, <span class="string">"XX"</span>, <span class="string">"XXX"</span>, <span class="string">"XL"</span>, <span class="string">"L"</span>, <span class="string">"LX"</span>, <span class="string">"LXX"</span>, <span class="string">"LXXX"</span>, <span class="string">"XC"</span>&#125;;</span><br><span class="line">        String[] I = &#123;<span class="string">""</span>, <span class="string">"I"</span>, <span class="string">"II"</span>, <span class="string">"III"</span>, <span class="string">"IV"</span>, <span class="string">"V"</span>, <span class="string">"VI"</span>, <span class="string">"VII"</span>, <span class="string">"VIII"</span>, <span class="string">"IX"</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> M[(num/<span class="number">1000</span>)]+C[(num%<span class="number">1000</span>)/<span class="number">100</span>]+X[(num%<span class="number">100</span>)/<span class="number">10</span>]+I[(num%<span class="number">10</span>)];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="13-Roman-to-Integer-Easy"><a href="#13-Roman-to-Integer-Easy" class="headerlink" title="13. Roman to Integer (Easy) @"></a>13. Roman to Integer (Easy) <a href="https://leetcode.com/problems/roman-to-integer/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Roman numerals are represented by seven different symbols: <code>I</code>, <code>V</code>, <code>X</code>, <code>L</code>, <code>C</code>, <code>D</code> and <code>M</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; Symbol       Value</span><br><span class="line">&gt; I             1</span><br><span class="line">&gt; V             5</span><br><span class="line">&gt; X             10</span><br><span class="line">&gt; L             50</span><br><span class="line">&gt; C             100</span><br><span class="line">&gt; D             500</span><br><span class="line">&gt; M             1000</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p>For example, two is written as <code>II</code> in Roman numeral, just two one’s added together. Twelve is written as, <code>XII</code>, which is simply <code>X</code> + <code>II</code>. The number twenty seven is written as <code>XXVII</code>, which is <code>XX</code> + <code>V</code> + <code>II</code>.</p>
<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not <code>IIII</code>. Instead, the number four is written as <code>IV</code>. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as <code>IX</code>. There are six instances where subtraction is used:</p>
<ul>
<li><code>I</code> can be placed before <code>V</code> (5) and <code>X</code> (10) to make 4 and 9. </li>
<li><code>X</code> can be placed before <code>L</code> (50) and <code>C</code> (100) to make 40 and 90. </li>
<li><code>C</code> can be placed before <code>D</code> (500) and <code>M</code> (1000) to make 400 and 900.</li>
</ul>
<p>Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: &quot;III&quot;</span><br><span class="line">&gt; Output: 3</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: &quot;IV&quot;</span><br><span class="line">&gt; Output: 4</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: &quot;IX&quot;</span><br><span class="line">&gt; Output: 9</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 4:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: &quot;LVIII&quot;</span><br><span class="line">&gt; Output: 58</span><br><span class="line">&gt; Explanation: L = 50, V= 5, III = 3.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 5:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: &quot;MCMXCIV&quot;</span><br><span class="line">&gt; Output: 1994</span><br><span class="line">&gt; Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Solution 1</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;Character, Integer&gt; hm = <span class="keyword">new</span> HashMap&lt;Character, Integer&gt;();</span><br><span class="line">        hm.put(<span class="string">'I'</span>, <span class="number">1</span>);</span><br><span class="line">        hm.put(<span class="string">'V'</span>, <span class="number">5</span>);</span><br><span class="line">        hm.put(<span class="string">'X'</span>, <span class="number">10</span>);</span><br><span class="line">        hm.put(<span class="string">'L'</span>, <span class="number">50</span>);</span><br><span class="line">        hm.put(<span class="string">'C'</span>, <span class="number">100</span>);</span><br><span class="line">        hm.put(<span class="string">'D'</span>, <span class="number">500</span>);</span><br><span class="line">        hm.put(<span class="string">'M'</span>, <span class="number">1000</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> maxDigit = <span class="number">0</span>, val = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = s.length() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">int</span> cur = hm.get(s.charAt(i));</span><br><span class="line">            <span class="keyword">if</span> (cur &gt;= maxDigit) &#123;</span><br><span class="line">                val += cur;</span><br><span class="line">                maxDigit = cur;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                val -= cur;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Solution 2</p>
<ul>
<li>仅有 I X C 可能成为前缀，所以遇到需要考虑是否更新前缀</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span> prev = <span class="string">' '</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="comment">// if (prev == ' ') prev = s.charAt(i);</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">switch</span> (s.charAt(i)) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'M'</span>:</span><br><span class="line">                    x += prev == <span class="string">'C'</span> ? <span class="number">900</span> : <span class="number">1000</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'D'</span>:</span><br><span class="line">                    x += prev == <span class="string">'C'</span> ? <span class="number">400</span> : <span class="number">500</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'C'</span>:</span><br><span class="line">                    <span class="keyword">if</span> (i &lt; s.length() - <span class="number">1</span> &amp;&amp; (s.charAt(i + <span class="number">1</span>) == <span class="string">'D'</span> || s.charAt(i + <span class="number">1</span>) == <span class="string">'M'</span>)) &#123;</span><br><span class="line">                        prev = <span class="string">'C'</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        x += prev == <span class="string">'X'</span> ? <span class="number">90</span> : <span class="number">100</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'L'</span>:</span><br><span class="line">                    x += prev == <span class="string">'X'</span> ? <span class="number">40</span> : <span class="number">50</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'X'</span>:</span><br><span class="line">                    <span class="keyword">if</span> (i &lt; s.length() - <span class="number">1</span> &amp;&amp; (s.charAt(i + <span class="number">1</span>) == <span class="string">'L'</span> || s.charAt(i + <span class="number">1</span>) == <span class="string">'C'</span>)) &#123;</span><br><span class="line">                        prev = <span class="string">'X'</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        x += prev == <span class="string">'I'</span> ? <span class="number">9</span> : <span class="number">10</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'V'</span>:</span><br><span class="line">                    x += prev == <span class="string">'I'</span> ? <span class="number">4</span> : <span class="number">5</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'I'</span>:</span><br><span class="line">                    <span class="keyword">if</span> (i &lt; s.length() - <span class="number">1</span> &amp;&amp; (s.charAt(i + <span class="number">1</span>) == <span class="string">'V'</span> || s.charAt(i + <span class="number">1</span>) == <span class="string">'X'</span>)) &#123;</span><br><span class="line">                        prev = <span class="string">'I'</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        x += <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="14-Longest-Common-Prefix-Easy"><a href="#14-Longest-Common-Prefix-Easy" class="headerlink" title="14. Longest Common Prefix (Easy) @"></a>14. Longest Common Prefix (Easy) <a href="https://leetcode.com/problems/longest-common-prefix/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Write a function to find the longest common prefix string amongst an array of strings.</p>
<p>If there is no common prefix, return an empty string <code>&quot;&quot;</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</span><br><span class="line">&gt; Output: &quot;fl&quot;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</span><br><span class="line">&gt; Output: &quot;&quot;</span><br><span class="line">&gt; Explanation: There is no common prefix among the input strings.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Note:</strong></p>
<p>All given inputs are in lowercase letters <code>a-z</code>.</p>
</blockquote>
<p>Solution 1 Recursion + Divide and Conquer</p>
<ul>
<li>二分所有串，一半一半考虑找出commonPrefix</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] strs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (strs.length == <span class="number">0</span> || strs == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="string">""</span>; <span class="comment">//特殊情况</span></span><br><span class="line">        <span class="keyword">return</span> longestCommonPrefix(strs, <span class="number">0</span>, strs.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] strs, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            <span class="keyword">return</span> strs[l];</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">            String lcpLeft = longestCommonPrefix(strs, l, mid);<span class="comment">//左区间</span></span><br><span class="line">            String lcpRight = longestCommonPrefix(strs, mid+<span class="number">1</span>, r);<span class="comment">//右区间</span></span><br><span class="line">            <span class="keyword">return</span> commonPrefix(lcpLeft, lcpRight);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">commonPrefix</span><span class="params">(String ls, String rs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> min = Math.min(ls.length(), rs.length());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;min; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ls.charAt(i) != rs.charAt(i)) &#123;</span><br><span class="line">                <span class="keyword">return</span> ls.substring(<span class="number">0</span>,i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ls.substring(<span class="number">0</span>,min);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Solution 2 Divide and Conquer</p>
<ul>
<li>假设commonPrefix长度，二分最短串长度</li>
<li>如果存在，则l和r最后汇聚在commonPrefix的尾部</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] strs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (strs.length == <span class="number">0</span> || strs == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> minLen = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strs.length; i++) &#123;</span><br><span class="line">            minLen = Math.min(strs[i].length(), minLen);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = minLen;</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (isCommonPrefix(strs, mid)) &#123;</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                r= mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> strs[<span class="number">0</span>].substring(<span class="number">0</span>, (l+r)/<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isCommonPrefix</span><span class="params">(String[] strs, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">        String s = strs[<span class="number">0</span>].substring(<span class="number">0</span>, len);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; strs.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!strs[i].startsWith(s)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="28-Implement-strStr-Easy"><a href="#28-Implement-strStr-Easy" class="headerlink" title="28. Implement strStr()  (Easy)  @"></a>28. Implement strStr()  (Easy)  <a href="https://leetcode.com/problems/implement-strstr/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Implement <a href="http://www.cplusplus.com/reference/cstring/strstr/" target="_blank" rel="noopener">strStr()</a>.</p>
<p>Return the index of the first occurrence of needle in haystack, or <strong>-1</strong> if needle is not part of haystack.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: haystack = &quot;hello&quot;, needle = &quot;ll&quot;</span><br><span class="line">&gt; Output: 2</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: haystack = &quot;aaaaa&quot;, needle = &quot;bba&quot;</span><br><span class="line">&gt; Output: -1</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Solution 1 Iteration</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">strStr</span><span class="params">(String haystack, String needle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (needle.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; haystack.length() - needle.length() + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (haystack.charAt(i) == needle.charAt(<span class="number">0</span>)) &#123;</span><br><span class="line">                <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (j &lt; needle.length() &amp;&amp; haystack.charAt(i+j) == needle.charAt(j)) &#123;</span><br><span class="line">                    j++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (j == needle.length())</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Solution 2 KMP (Knuth–Morris–Pratt <a href="https://en.wikipedia.org/wiki/String-searching_algorithm" target="_blank" rel="noopener">string-searching algorithm</a>)</p>
<ul>
<li>核心是PMT(Partial Match Table)数组：前缀B – A=BS (S为非空字符串)；PMT 中的值是字符串的前缀集合与后缀集合的交集中最长元素的长度</li>
<li><img src=":/67dad347bcda4fb7998271ac90779b10" alt="IMG_0923.JPG"></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">strStr</span><span class="params">(String haystack, String needle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (needle.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = -<span class="number">1</span>, N = needle.length(), M = haystack.length();</span><br><span class="line">        <span class="keyword">int</span>[] next = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">        next[<span class="number">0</span>] = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; N-<span class="number">1</span>) &#123;<span class="comment">// generate next array</span></span><br><span class="line">            <span class="keyword">if</span> (j == -<span class="number">1</span> || needle.charAt(i) == needle.charAt(j)) &#123;</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">                next[i] = j;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                j = next[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        i = <span class="number">0</span>; j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; M &amp;&amp; j &lt; N) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j == -<span class="number">1</span> || haystack.charAt(i) == needle.charAt(j)) &#123;</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                j = next[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j == N) </span><br><span class="line">            <span class="keyword">return</span> i-j;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Solution 3 HashMap</p>
<ul>
<li>直接containsKey匹配子串</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">strStr</span><span class="params">(String haystack, String needle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (needle.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (needle.length() &gt; haystack.length()) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(haystack, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">//put each needle-len substring of haystack into the hashmap</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= haystack.length() - needle.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(needle)) &#123;</span><br><span class="line">                <span class="keyword">return</span> map.get(needle);</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(haystack.substring(i, i+needle.length()), i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map.getOrDefault(needle, -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="38-Count-and-Say-Easy"><a href="#38-Count-and-Say-Easy" class="headerlink" title="38. Count and Say (Easy) @"></a>38. Count and Say (Easy) <a href="https://leetcode.com/problems/count-and-say/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>The count-and-say sequence is the sequence of integers with the first five terms as following:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; 1.     1</span><br><span class="line">&gt; 2.     11</span><br><span class="line">&gt; 3.     21</span><br><span class="line">&gt; 4.     1211</span><br><span class="line">&gt; 5.     111221</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><code>1</code> is read off as <code>&quot;one 1&quot;</code> or <code>11</code>.<br><code>11</code> is read off as <code>&quot;two 1s&quot;</code> or <code>21</code>.<br><code>21</code> is read off as <code>&quot;one 2</code>, then <code>one 1&quot;</code> or <code>1211</code>.</p>
<p>Given an integer <em>n</em> where 1 ≤ <em>n</em> ≤ 30, generate the <em>n</em>th term of the count-and-say sequence. You can do so recursively, in other words from the previous member read off the digits, counting the number of digits in groups of the same digit.</p>
<p>Note: Each term of the sequence of integers will be represented as a string.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: 1</span><br><span class="line">&gt; Output: &quot;1&quot;</span><br><span class="line">&gt; Explanation: This is the base case.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: 4</span><br><span class="line">&gt; Output: &quot;1211&quot;</span><br><span class="line">&gt; Explanation: For n = 3 the term was &quot;21&quot; in which we have two groups &quot;2&quot; and &quot;1&quot;, &quot;2&quot; can be read as &quot;12&quot; which means frequency = 1 and value = 2, the same way &quot;1&quot; is read as &quot;11&quot;, so the answer is the concatenation of &quot;12&quot; and &quot;11&quot; which is &quot;1211&quot;.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Solution 1 Recursion</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">countAndSay</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"1"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            String preStr = countAndSay(n-<span class="number">1</span>);</span><br><span class="line">            String res = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">int</span> len = <span class="number">1</span>; <span class="comment">//len of same char</span></span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">1</span>; <span class="comment">//idx of preStr</span></span><br><span class="line">            <span class="comment">//scan preStr to determine the following string</span></span><br><span class="line">            <span class="keyword">while</span> (i &lt; preStr.length()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (preStr.charAt(i) == preStr.charAt(i-<span class="number">1</span>)) &#123;</span><br><span class="line">                    len++;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    res += String.valueOf(len) + String.valueOf(preStr.charAt(i-<span class="number">1</span>));</span><br><span class="line">                    len = <span class="number">1</span>; <span class="comment">//reset len of same char</span></span><br><span class="line">                &#125;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            res += String.valueOf(len) + String.valueOf(preStr.charAt(i-<span class="number">1</span>));</span><br><span class="line">            <span class="keyword">return</span> res.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Solution 1 Improvement </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">countAndSay</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"1"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            String preStr = countAndSay(n-<span class="number">1</span>);</span><br><span class="line">            StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">int</span> len = <span class="number">1</span>; <span class="comment">//len of same char</span></span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">1</span>; <span class="comment">//idx of preStr</span></span><br><span class="line">            <span class="comment">//scan preStr to determine the following string</span></span><br><span class="line">            <span class="keyword">while</span> (i &lt; preStr.length()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (preStr.charAt(i) == preStr.charAt(i-<span class="number">1</span>)) &#123;</span><br><span class="line">                    len++;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// res += String.valueOf(len) + String.valueOf(preStr.charAt(i-1));</span></span><br><span class="line">                    res.append(len).append(preStr.charAt(i-<span class="number">1</span>));</span><br><span class="line">                    len = <span class="number">1</span>; <span class="comment">//reset len of same char</span></span><br><span class="line">                &#125;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// res += String.valueOf(len) + String.valueOf(preStr.charAt(i-1));</span></span><br><span class="line">            res.append(len).append(preStr.charAt(i-<span class="number">1</span>));</span><br><span class="line">            <span class="keyword">return</span> res.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Solution 2 Recursion</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">countAndSay</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"1"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> read(countAndSay(n-<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">read</span><span class="params">(String preStr)</span> </span>&#123;</span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; preStr.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = preStr.charAt(i); <span class="comment">//current char</span></span><br><span class="line">            <span class="keyword">int</span> len = <span class="number">1</span>; <span class="comment">//len of same char</span></span><br><span class="line">            <span class="comment">//find and append next "len+c"</span></span><br><span class="line">            <span class="keyword">while</span> ((i+<span class="number">1</span>) &lt; preStr.length()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (preStr.charAt(i+<span class="number">1</span>) != c) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    i++;</span><br><span class="line">                    len++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            res.append(len).append(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="49-Group-Anagrams-Medium"><a href="#49-Group-Anagrams-Medium" class="headerlink" title="49. Group Anagrams (Medium) @"></a>49. Group Anagrams (Medium) <a href="https://leetcode.com/problems/group-anagrams/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Given an array of strings, group anagrams together.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: [&quot;eat&quot;, &quot;tea&quot;, &quot;tan&quot;, &quot;ate&quot;, &quot;nat&quot;, &quot;bat&quot;],</span><br><span class="line">&gt; Output:</span><br><span class="line">&gt; [</span><br><span class="line">&gt; [&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;],</span><br><span class="line">&gt; [&quot;nat&quot;,&quot;tan&quot;],</span><br><span class="line">&gt; [&quot;bat&quot;]</span><br><span class="line">&gt; ]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li>All inputs will be in lowercase.</li>
<li>The order of your output does not matter.</li>
</ul>
</blockquote>
<p>Solution 1 Hash Map</p>
<ul>
<li>sort(str) 找到同字母的串</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; groupAnagrams(String[] strs) &#123;</span><br><span class="line">        <span class="keyword">if</span>(strs == <span class="keyword">null</span> || strs.length == <span class="number">0</span>) &#123;</span><br><span class="line">            List&lt;List&lt;String&gt;&gt; ans = <span class="keyword">new</span> ArrayList&lt;List&lt;String&gt;&gt;();</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        HashMap&lt;String, List&lt;String&gt;&gt; hash = <span class="keyword">new</span> HashMap&lt;String, List&lt;String&gt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String str:strs) &#123;</span><br><span class="line">            <span class="keyword">char</span>[] c = str.toCharArray();</span><br><span class="line">            Arrays.sort(c);</span><br><span class="line">            String temp = String.valueOf(c);</span><br><span class="line">            <span class="keyword">if</span> (!hash.containsKey(temp)) &#123;</span><br><span class="line">                List&lt;String&gt; vals = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">                vals.add(str);</span><br><span class="line">                hash.put(temp, vals);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                hash.get(temp).add(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; ans = <span class="keyword">new</span> ArrayList&lt;List&lt;String&gt;&gt;();</span><br><span class="line">        ans.addAll(hash.values());</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Solution 2 Hash Map + Prime Number</p>
<ul>
<li>每个字母对应一个质数，计算所有字符串的积</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; groupAnagrams(String[] strs) &#123;</span><br><span class="line">        <span class="comment">//26个质数对应26个字母</span></span><br><span class="line">        <span class="keyword">int</span>[] primes = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">47</span>, <span class="number">53</span>, <span class="number">59</span>, <span class="number">61</span>, <span class="number">67</span>, <span class="number">71</span>, <span class="number">73</span>, <span class="number">79</span>, <span class="number">83</span>, <span class="number">89</span>, <span class="number">97</span>, <span class="number">101</span>, <span class="number">103</span>&#125;;</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; ans = <span class="keyword">new</span> ArrayList&lt;List&lt;String&gt;&gt;();</span><br><span class="line">        HashMap&lt;Integer, List&lt;String&gt;&gt; hash = <span class="keyword">new</span> HashMap&lt;Integer, List&lt;String&gt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String str:strs) &#123;</span><br><span class="line">            <span class="keyword">int</span> key = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">char</span> c : str.toCharArray()) &#123;</span><br><span class="line">                key *= primes[c-<span class="string">'a'</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!hash.containsKey(key)) &#123;</span><br><span class="line">                List&lt;String&gt; vals = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">                vals.add(str);</span><br><span class="line">                hash.put(key, vals);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                hash.get(key).add(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans.addAll(hash.values());</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="58-Length-of-Last-Word-Easy"><a href="#58-Length-of-Last-Word-Easy" class="headerlink" title="58. Length of Last Word (Easy) @"></a>58. Length of Last Word (Easy) <a href="https://leetcode.com/problems/length-of-last-word/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Given a string <em>s</em> consists of upper/lower-case alphabets and empty space characters <code>&#39; &#39;</code>, return the length of last word (last word means the last appearing word if we loop from left to right) in the string.</p>
<p>If the last word does not exist, return 0.</p>
<p><strong>Note:</strong> A word is defined as a <strong>maximal substring</strong> consisting of non-space characters only.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: &quot;Hello World&quot;</span><br><span class="line">&gt; Output: 5</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Solution </p>
<ul>
<li>Start = 第一个非’ ‘字符</li>
<li>End = 下一个‘ ’</li>
<li>注意while条件顺序，首先判断是否越界</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLastWord</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> first = s.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//the first not-' ' character --- start</span></span><br><span class="line">        <span class="keyword">while</span> (first &gt;= <span class="number">0</span> &amp;&amp; s.charAt(first) == <span class="string">' '</span>)</span><br><span class="line">            first--;</span><br><span class="line">        <span class="comment">//next ' ' position --- end</span></span><br><span class="line">        <span class="keyword">while</span> (first &gt;= <span class="number">0</span> &amp;&amp; s.charAt(first) != <span class="string">' '</span>) &#123;</span><br><span class="line">            first--;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="87-Scramble-String-Hard"><a href="#87-Scramble-String-Hard" class="headerlink" title="87.  Scramble String (Hard) @"></a>87.  Scramble String (Hard) <a href="https://leetcode.com/problems/scramble-string/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Given a string <em>s1</em>, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively.</p>
<p>Below is one possible representation of <em>s1</em> = <code>&quot;great&quot;</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;  great</span><br><span class="line">&gt; /    \</span><br><span class="line">&gt; gr    eat</span><br><span class="line">&gt; / \    /  \</span><br><span class="line">&gt; g   r  e   at</span><br><span class="line">&gt;         / \</span><br><span class="line">&gt;        a   t</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p>To scramble the string, we may choose any non-leaf node and swap its two children.</p>
<p>For example, if we choose the node <code>&quot;gr&quot;</code> and swap its two children, it produces a scrambled string <code>&quot;rgeat&quot;</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;  rgeat</span><br><span class="line">&gt; /    \</span><br><span class="line">&gt; rg    eat</span><br><span class="line">&gt; / \    /  \</span><br><span class="line">&gt; r   g  e   at</span><br><span class="line">&gt;         / \</span><br><span class="line">&gt;        a   t</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p>We say that <code>&quot;rgeat&quot;</code> is a scrambled string of <code>&quot;great&quot;</code>.</p>
<p>Similarly, if we continue to swap the children of nodes <code>&quot;eat&quot;</code> and <code>&quot;at&quot;</code>, it produces a scrambled string <code>&quot;rgtae&quot;</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;  rgtae</span><br><span class="line">&gt; /    \</span><br><span class="line">&gt; rg    tae</span><br><span class="line">&gt; / \    /  \</span><br><span class="line">&gt; r   g  ta  e</span><br><span class="line">&gt;     / \</span><br><span class="line">&gt;    t   a</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p>We say that <code>&quot;rgtae&quot;</code> is a scrambled string of <code>&quot;great&quot;</code>.</p>
<p>Given two strings <em>s1</em> and <em>s2</em> of the same length, determine if <em>s2</em> is a scrambled string of <em>s1</em>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: s1 = &quot;great&quot;, s2 = &quot;rgeat&quot;</span><br><span class="line">&gt; Output: true</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: s1 = &quot;abcde&quot;, s2 = &quot;caebd&quot;</span><br><span class="line">&gt; Output: false</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Solution 1 Recursion</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isScramble</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//len of str</span></span><br><span class="line">        <span class="keyword">if</span> (s1.length() != s2.length()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (s1.equals(s2)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//num of letters</span></span><br><span class="line">        <span class="keyword">int</span>[] letter = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s1.length(); i++) &#123;</span><br><span class="line">            letter[s1.charAt(i) - <span class="string">'a'</span>]++;</span><br><span class="line">            letter[s2.charAt(i) - <span class="string">'a'</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//diff num of letters -&gt; false</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (letter[i] != <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//loop through all cut points</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; s1.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isScramble(s1.substring(<span class="number">0</span>, i), s2.substring(<span class="number">0</span>, i)) &amp;&amp; isScramble(s1.substring(i), s2.substring(i)))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="comment">//switch</span></span><br><span class="line">            <span class="keyword">if</span> (isScramble(s1.substring(i), s2.substring(<span class="number">0</span>, s2.length() - i)) &amp;&amp; isScramble(s1.substring(<span class="number">0</span>, i), s2.substring(s2.length() - i)))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Solution 2 Recursion + Memorization</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isScramble</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;String, Integer&gt; memo = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">return</span> isSrambleHelper(s1, s2, memo);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isSrambleHelper</span><span class="params">(String s1, String s2, HashMap&lt;String, Integer&gt; memo)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//previous res</span></span><br><span class="line">        <span class="keyword">int</span> res = memo.getOrDefault(s1 + <span class="string">"#"</span> + s2, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (res == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (res == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//len of str</span></span><br><span class="line">        <span class="keyword">if</span> (s1.length() != s2.length()) &#123;</span><br><span class="line">            memo.put(s1 + <span class="string">"#"</span> + s2, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (s1.equals(s2)) &#123;</span><br><span class="line">            memo.put(s1 + <span class="string">"#"</span> + s2, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//num of letters</span></span><br><span class="line">        <span class="keyword">int</span>[] letter = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s1.length(); i++) &#123;</span><br><span class="line">            letter[s1.charAt(i) - <span class="string">'a'</span>]++;</span><br><span class="line">            letter[s2.charAt(i) - <span class="string">'a'</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//diff num of letters -&gt; false</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (letter[i] != <span class="number">0</span>) &#123;</span><br><span class="line">                memo.put(s1 + <span class="string">"#"</span> + s2, <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//loop through all cut points</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; s1.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isScramble(s1.substring(<span class="number">0</span>, i), s2.substring(<span class="number">0</span>, i)) &amp;&amp; isScramble(s1.substring(i), s2.substring(i))) &#123;</span><br><span class="line">                memo.put(s1 + <span class="string">"#"</span> + s2, <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">                </span><br><span class="line">            <span class="comment">//switch</span></span><br><span class="line">            <span class="keyword">if</span> (isScramble(s1.substring(i), s2.substring(<span class="number">0</span>, s2.length() - i)) &amp;&amp; isScramble(s1.substring(<span class="number">0</span>, i), s2.substring(s2.length() - i))) &#123;</span><br><span class="line">                memo.put(s1 + <span class="string">"#"</span> + s2, <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        memo.put(s1 + <span class="string">"#"</span> + s2, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Solution 3 DP</p>
<ul>
<li><a href="https://leetcode-cn.com/problems/scramble-string/solution/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by-1-2/" target="_blank" rel="noopener">solution detail</a></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isScramble</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//len of str</span></span><br><span class="line">        <span class="keyword">if</span> (s1.length() != s2.length()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (s1.equals(s2)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//num of letters</span></span><br><span class="line">        <span class="keyword">int</span>[] letter = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s1.length(); i++) &#123;</span><br><span class="line">            letter[s1.charAt(i) - <span class="string">'a'</span>]++;</span><br><span class="line">            letter[s2.charAt(i) - <span class="string">'a'</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//diff num of letters -&gt; false</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (letter[i] != <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> length = s1.length();</span><br><span class="line">        <span class="keyword">boolean</span>[][][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[length + <span class="number">1</span>][length][length];</span><br><span class="line">        <span class="comment">//loop through all the len of str</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">1</span>; len &lt; length + <span class="number">1</span>; len++) &#123;</span><br><span class="line">            <span class="comment">//start of s1</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i + len &lt; length + <span class="number">1</span>; i++) &#123;</span><br><span class="line">                <span class="comment">//start of s2</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j + len &lt; length + <span class="number">1</span>; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (len == <span class="number">1</span>) &#123;</span><br><span class="line">                        dp[len][i][j] = s1.charAt(i) == s2.charAt(j);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">//loop through all the cut point</span></span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> q = <span class="number">1</span>; q &lt; len; q++) &#123;</span><br><span class="line">                            dp[len][i][j] = (dp[q][i][j] &amp;&amp; dp[len-q][i+q][j+q]) || (dp[q][i][j+len-q] &amp;&amp; dp[len-q][i+q][j]);</span><br><span class="line">                            <span class="keyword">if</span> (dp[len][i][j])</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[length][<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="125-Valid-Palindrome-Easy"><a href="#125-Valid-Palindrome-Easy" class="headerlink" title="125. Valid Palindrome (Easy) @"></a>125. Valid Palindrome (Easy) <a href="https://leetcode.com/problems/valid-palindrome/submissions/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.</p>
<p><strong>Note:</strong> For the purpose of this problem, we define empty string as valid palindrome.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: &quot;A man, a plan, a canal: Panama&quot;</span><br><span class="line">&gt; Output: true</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: &quot;race a car&quot;</span><br><span class="line">&gt; Output: false</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Solution<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length() == <span class="number">0</span> || s == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        s = s.toLowerCase();</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = s.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!Character.isLetterOrDigit(s.charAt(left))) &#123;</span><br><span class="line">                left ++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!Character.isLetterOrDigit(s.charAt(right))) &#123;</span><br><span class="line">                right --;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(left) == s.charAt(right)) &#123;</span><br><span class="line">                left ++;</span><br><span class="line">                right --;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="151-Reverse-Words-in-a-String-Medium"><a href="#151-Reverse-Words-in-a-String-Medium" class="headerlink" title="151. Reverse Words in a String (Medium)  @"></a>151. Reverse Words in a String (Medium)  <a href="https://leetcode.com/problems/reverse-words-in-a-string/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Given an input string, reverse the string word by word.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: &quot;the sky is blue&quot;</span><br><span class="line">&gt; Output: &quot;blue is sky the&quot;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: &quot;  hello world!  &quot;</span><br><span class="line">&gt; Output: &quot;world! hello&quot;</span><br><span class="line">&gt; Explanation: Your reversed string should not contain leading or trailing spaces.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: &quot;a good   example&quot;</span><br><span class="line">&gt; Output: &quot;example good a&quot;</span><br><span class="line">&gt; Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Solution 1 Library function</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reverseWords</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        StringBuilder ans = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="comment">//去掉s的首尾空格 然后将字符串拆分</span></span><br><span class="line">        String[] str = s.trim().split(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = str.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="comment">//空格后面的空格会变成空字符串</span></span><br><span class="line">            <span class="keyword">if</span>(!str[i].equals(<span class="string">""</span>)) ans.append(str[i] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//去掉最后添加上的空格</span></span><br><span class="line">        ans = <span class="keyword">new</span> StringBuilder(ans.toString().trim());</span><br><span class="line">        <span class="keyword">return</span> ans.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Solution 2 从后向前</p>
<ul>
<li>将源字符串转换为数组，然后从后向前读取，遇到空格，判断是否单词结束</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reverseWords</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">char</span>[] chars = s.toCharArray();</span><br><span class="line">        StringBuffer ans = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>, ptr = s.length()-<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//从后向前扫描</span></span><br><span class="line">        <span class="keyword">while</span>(ptr &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//空格两种情况：单词结束 和 未开始</span></span><br><span class="line">            <span class="keyword">if</span> (chars[ptr] == <span class="string">' '</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (count != <span class="number">0</span>) &#123;</span><br><span class="line">                    ans.append(chars, ptr + <span class="number">1</span>, count).append(<span class="string">' '</span>);</span><br><span class="line">                    count = <span class="number">0</span>;<span class="comment">//重置count</span></span><br><span class="line">                &#125;</span><br><span class="line">            <span class="comment">//遇到字母</span></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            ptr--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//处理最后一个单词</span></span><br><span class="line">        <span class="keyword">if</span> (count != <span class="number">0</span>) &#123;</span><br><span class="line">            ans.append(chars, <span class="number">0</span>, count).append(<span class="string">' '</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//去除最后一个空格</span></span><br><span class="line">        <span class="keyword">return</span> ans.length() == <span class="number">0</span> ? <span class="string">""</span> : ans.toString().substring(<span class="number">0</span>, ans.length()-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Solution 3</p>
<ul>
<li>整句全部逆置，再逐个单词逆置</li>
</ul>
<h3 id="166-Fraction-to-Recurring-Decimal-Medium"><a href="#166-Fraction-to-Recurring-Decimal-Medium" class="headerlink" title="166. Fraction to Recurring Decimal (Medium) @"></a>166. Fraction to Recurring Decimal (Medium) <a href="https://leetcode.com/problems/fraction-to-recurring-decimal/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.</p>
<p>If the fractional part is repeating, enclose the repeating part in parentheses.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: numerator = 1, denominator = 2</span><br><span class="line">&gt; Output: &quot;0.5&quot;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: numerator = 2, denominator = 1</span><br><span class="line">&gt; Output: &quot;2&quot;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: numerator = 2, denominator = 3</span><br><span class="line">&gt; Output: &quot;0.(6)&quot;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Solution HashMap</p>
<ul>
<li>利用哈希表存储余数位置，以判断是否存在重复的对应小数位</li>
<li>当出现重复则加入“（）”</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fractionToDecimal</span><span class="params">(<span class="keyword">int</span> numerator, <span class="keyword">int</span> denominator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (numerator == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">"0"</span>;</span><br><span class="line">        </span><br><span class="line">        StringBuilder fraction = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="comment">//positive or negative</span></span><br><span class="line">        <span class="keyword">if</span> (numerator &lt; <span class="number">0</span> ^ denominator &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            fraction.append(<span class="string">"-"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Long dividend = Math.abs(Long.valueOf(numerator));</span><br><span class="line">        Long divisor = Math.abs(Long.valueOf(denominator));</span><br><span class="line">        <span class="comment">//Integer Part</span></span><br><span class="line">        fraction.append(String.valueOf(dividend/divisor));</span><br><span class="line">        Long remainder = dividend % divisor;</span><br><span class="line">        <span class="keyword">if</span> (remainder == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> fraction.toString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//Decimal Part</span></span><br><span class="line">        fraction.append(<span class="string">"."</span>);</span><br><span class="line">        Map&lt;Long, Integer&gt; pos = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (remainder != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//repeat</span></span><br><span class="line">            <span class="keyword">if</span> (pos.containsKey(remainder)) &#123;</span><br><span class="line">                fraction.insert(pos.get(remainder), <span class="string">"("</span>);</span><br><span class="line">                fraction.append(<span class="string">")"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//add new decimal num</span></span><br><span class="line">            pos.put(remainder, fraction.length()); <span class="comment">//add remainder's position</span></span><br><span class="line">            remainder *= <span class="number">10</span>;</span><br><span class="line">            fraction.append(String.valueOf(remainder / divisor));<span class="comment">//add corresponding decimal</span></span><br><span class="line">            remainder %= divisor;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fraction.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="168-Excel-Sheet-Column-Title-Easy"><a href="#168-Excel-Sheet-Column-Title-Easy" class="headerlink" title="168. Excel Sheet Column Title (Easy) @"></a>168. Excel Sheet Column Title (Easy) <a href="https://leetcode.com/problems/excel-sheet-column-title/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Given a positive integer, return its corresponding column title as appear in an Excel sheet.</p>
<p>For example:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;  1 -&gt; A</span><br><span class="line">&gt;  2 -&gt; B</span><br><span class="line">&gt;  3 -&gt; C</span><br><span class="line">&gt;  ...</span><br><span class="line">&gt;  26 -&gt; Z</span><br><span class="line">&gt;  27 -&gt; AA</span><br><span class="line">&gt;  28 -&gt; AB </span><br><span class="line">&gt;  ...</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: 1</span><br><span class="line">&gt; Output: &quot;A&quot;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: 28</span><br><span class="line">&gt; Output: &quot;AB&quot;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: 701</span><br><span class="line">&gt; Output: &quot;ZY&quot;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Solution 进制转换</p>
<ul>
<li>注意是1 - 26 所以使用 n-1</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">convertToTitle</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        StringBuilder str = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            str.insert(<span class="number">0</span>, (<span class="keyword">char</span>)((n-<span class="number">1</span>)%<span class="number">26</span> + <span class="string">'A'</span>));</span><br><span class="line">            n = (n-<span class="number">1</span>)/<span class="number">26</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="171-Excel-Sheet-Column-Number-Easy"><a href="#171-Excel-Sheet-Column-Number-Easy" class="headerlink" title="171. Excel Sheet Column Number (Easy) @"></a>171. Excel Sheet Column Number (Easy) <a href="https://leetcode.com/problems/excel-sheet-column-number/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Given a column title as appear in an Excel sheet, return its corresponding column number.</p>
<p>For example:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;  A -&gt; 1</span><br><span class="line">&gt;  B -&gt; 2</span><br><span class="line">&gt;  C -&gt; 3</span><br><span class="line">&gt;  ...</span><br><span class="line">&gt;  Z -&gt; 26</span><br><span class="line">&gt;  AA -&gt; 27</span><br><span class="line">&gt;  AB -&gt; 28 </span><br><span class="line">&gt;  ...</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: &quot;A&quot;</span><br><span class="line">&gt; Output: 1</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: &quot;AB&quot;</span><br><span class="line">&gt; Output: 28</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: &quot;ZY&quot;</span><br><span class="line">&gt; Output: 701</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Solution</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">titleToNumber</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : s.toCharArray()) &#123;</span><br><span class="line">            ans = ans * <span class="number">26</span> + (<span class="keyword">int</span>)(c - <span class="string">'A'</span> + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="179-Largest-Number-Medium"><a href="#179-Largest-Number-Medium" class="headerlink" title="179. Largest Number (Medium) @"></a>179. Largest Number (Medium) <a href="https://leetcode.com/problems/largest-number/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Given a list of non negative integers, arrange them such that they form the largest number.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: [10,2]</span><br><span class="line">&gt; Output: &quot;210&quot;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: [3,30,34,5,9]</span><br><span class="line">&gt; Output: &quot;9534330&quot;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Note:</strong> The result may be very large, so you need to return a string instead of an integer.</p>
</blockquote>
<p>Solution </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LargerNumberComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String a, String b)</span> </span>&#123;</span><br><span class="line">            String order1 = a + b;</span><br><span class="line">            String order2 = b + a;</span><br><span class="line">            <span class="keyword">return</span> order2.compareTo(order1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">largestNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//convert to strings</span></span><br><span class="line">        String[] asStrs = <span class="keyword">new</span> String[nums.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            asStrs[i] = String.valueOf(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Arrays.sort(asStrs, <span class="keyword">new</span> LargerNumberComparator());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (asStrs[<span class="number">0</span>].equals(<span class="string">"0"</span>)) <span class="keyword">return</span> <span class="string">"0"</span>;</span><br><span class="line">        </span><br><span class="line">        StringBuilder ans = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (String str : asStrs) &#123;</span><br><span class="line">            ans.append(str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="205-Isomorphic-Strings-Easy"><a href="#205-Isomorphic-Strings-Easy" class="headerlink" title="205. Isomorphic Strings (Easy) @"></a>205. Isomorphic Strings (Easy) <a href="https://leetcode.com/problems/isomorphic-strings/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Given two strings <strong><em>s\</em></strong> and <strong><em>t\</em></strong>, determine if they are isomorphic.</p>
<p>Two strings are isomorphic if the characters in <strong><em>s\</em></strong> can be replaced to get <strong><em>t\</em></strong>.</p>
<p>All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: s = &quot;egg&quot;, t = &quot;add&quot;</span><br><span class="line">&gt; Output: true</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: s = &quot;foo&quot;, t = &quot;bar&quot;</span><br><span class="line">&gt; Output: false</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: s = &quot;paper&quot;, t = &quot;title&quot;</span><br><span class="line">&gt; Output: true</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Note:</strong><br>You may assume both <strong><em>s\</em></strong> and <strong><em>t\</em></strong> have the same length.</p>
</blockquote>
<p>Solution 1 HashMap</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isIsomorphic</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length() != t.length()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//map -- match char in s and t</span></span><br><span class="line">        HashMap&lt;Character, Character&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//set -- judge char in t whether has mapped</span></span><br><span class="line">        Set&lt;Character&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">char</span> sChart, tChart;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            sChart = s.charAt(i);</span><br><span class="line">            tChart = t.charAt(i);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(!map.containsKey(sChart)) &#123;<span class="comment">//no mapped</span></span><br><span class="line">                <span class="keyword">if</span> (set.contains(tChart)) &#123;<span class="comment">//t has been mapped</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    map.put(sChart, tChart);</span><br><span class="line">                    set.add(tChart);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;<span class="comment">//mapped</span></span><br><span class="line">                <span class="keyword">if</span> (map.get(sChart) != tChart) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Solution 2 Array</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isIsomorphic</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] sChars = s.toCharArray();</span><br><span class="line">        <span class="keyword">char</span>[] tChars = t.toCharArray();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> length = sChars.length;</span><br><span class="line">        <span class="keyword">if</span>(length != tChars.length) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] sm = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">256</span>];</span><br><span class="line">        <span class="keyword">char</span>[] tm = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">256</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;length; i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> sc = sChars[i];</span><br><span class="line">            <span class="keyword">char</span> tc = tChars[i];</span><br><span class="line">            <span class="keyword">if</span>(sm[sc] == <span class="number">0</span> &amp;&amp; tm[tc] == <span class="number">0</span>)&#123;</span><br><span class="line">                sm[sc] = tc;</span><br><span class="line">                tm[tc] = sc;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(sm[sc] != tc || tm[tc] != sc)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="242-Valid-Anagram-Easy"><a href="#242-Valid-Anagram-Easy" class="headerlink" title="242. Valid Anagram (Easy) @"></a>242. Valid Anagram (Easy) <a href="https://leetcode.com/problems/valid-anagram/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Given two strings <em>s</em> and <em>t</em> , write a function to determine if <em>t</em> is an anagram of <em>s</em>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: s = &quot;anagram&quot;, t = &quot;nagaram&quot;</span><br><span class="line">&gt; Output: true</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: s = &quot;rat&quot;, t = &quot;car&quot;</span><br><span class="line">&gt; Output: false</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Note:</strong><br>You may assume the string contains only lowercase alphabets.</p>
<p><strong>Follow up:</strong><br>What if the inputs contain unicode characters? How would you adapt your solution to such case?</p>
</blockquote>
<p>Solution 1 Sort</p>
<ul>
<li>排序，比较</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAnagram</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">char</span>[] sArr = s.toCharArray();</span><br><span class="line">		<span class="keyword">char</span>[] tArr = t.toCharArray();</span><br><span class="line"> </span><br><span class="line">		Arrays.sort(sArr);</span><br><span class="line">		Arrays.sort(tArr);</span><br><span class="line"> </span><br><span class="line">		<span class="keyword">return</span> String.valueOf(sArr).equals(String.valueOf(tArr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Solution 2 Array</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAnagram</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length() != t.length()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[] count = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> sChar = s.charAt(i);</span><br><span class="line">            <span class="keyword">char</span> tChar = t.charAt(i);</span><br><span class="line">            </span><br><span class="line">            count[sChar-<span class="string">'a'</span>] ++;</span><br><span class="line">            count[tChar-<span class="string">'a'</span>] --;</span><br><span class="line">        &#125;</span><br><span class="line">       	<span class="comment">//遍历整个count数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (count[i] != <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="290-Word-Pattern-Easy"><a href="#290-Word-Pattern-Easy" class="headerlink" title="290. Word Pattern (Easy) @"></a>290. Word Pattern (Easy) <a href="https://leetcode.com/problems/word-pattern/submissions/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Given a <code>pattern</code> and a string <code>str</code>, find if <code>str</code> follows the same pattern.</p>
<p>Here <strong>follow</strong> means a full match, such that there is a bijection between a letter in <code>pattern</code> and a <strong>non-empty</strong> word in <code>str</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: pattern = &quot;abba&quot;, str = &quot;dog cat cat dog&quot;</span><br><span class="line">&gt; Output: true</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input:pattern = &quot;abba&quot;, str = &quot;dog cat cat fish&quot;</span><br><span class="line">&gt; Output: false</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: pattern = &quot;aaaa&quot;, str = &quot;dog cat cat dog&quot;</span><br><span class="line">&gt; Output: false</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 4:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: pattern = &quot;abba&quot;, str = &quot;dog dog dog dog&quot;</span><br><span class="line">&gt; Output: false</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Notes:</strong><br>You may assume <code>pattern</code> contains only lowercase letters, and <code>str</code> contains lowercase letters that may be separated by a single space.</p>
</blockquote>
<p>Solution–Improvement of P205 Solution 1</p>
<ul>
<li>由于字符串比较需要转换，所以用字符串做键，模式字符作为值</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wordPattern</span><span class="params">(String pattern, String str)</span> </span>&#123;</span><br><span class="line">        String[] Strs = str.split(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">char</span>[] p = pattern.toCharArray();</span><br><span class="line">        <span class="keyword">if</span> (Strs.length != p.length) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        </span><br><span class="line">        HashMap&lt;String, Character&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Set&lt;Character&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p.length; i++) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(!map.containsKey(Strs[i])) &#123;<span class="comment">//no mapped</span></span><br><span class="line">                <span class="keyword">if</span> (set.contains(p[i])) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    map.put(Strs[i], p[i]);</span><br><span class="line">                    set.add(p[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;<span class="comment">//mapped</span></span><br><span class="line">                <span class="keyword">if</span> (map.get(Strs[i]) != p[i]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="316-Remove-Duplicate-Letters-Hard"><a href="#316-Remove-Duplicate-Letters-Hard" class="headerlink" title="316. Remove Duplicate Letters (Hard) @"></a>316. Remove Duplicate Letters (Hard) <a href="https://leetcode.com/problems/remove-duplicate-letters/submissions/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Given a string which contains only lowercase letters, remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: &quot;bcabc&quot;</span><br><span class="line">&gt; Output: &quot;abc&quot;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: &quot;cbacdcbc&quot;</span><br><span class="line">&gt; Output: &quot;acdb&quot;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Solution 1 Stack</p>
<p>思路：每个字符必须出现一次，当这个字符只有一次机会的时候必须添加到字符串结尾，反之，如果后面还有则可以把优先级高的先放进来。<br>步骤：</p>
<ol>
<li><p>统计s中字符最后位置</p>
</li>
<li><p>如果当前字符已经出现在stack中则跳过</p>
</li>
<li><p>如果当前字符不在栈里：</p>
<p>a. 若当前字符char小与栈顶元素，且栈顶元素有剩余 =》栈顶出栈 并 标记栈顶元素不在栈中（重复该操作直到不满足条件或栈为空）</p>
<p>b. 当前字符char入栈，并标记char在栈中</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">removeDuplicateLetters</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = s.length();</span><br><span class="line">        <span class="keyword">if</span> (len &lt; <span class="number">2</span>) <span class="keyword">return</span> s;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">boolean</span>[] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">int</span>[] lastPos = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>]; <span class="comment">// 1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            lastPos[s.charAt(i) - <span class="string">'a'</span>] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> cur = s.charAt(i);</span><br><span class="line">            <span class="comment">// 2</span></span><br><span class="line">            <span class="keyword">if</span> (visited[cur - <span class="string">'a'</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">// 3.a</span></span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; stack.peek() &gt; cur &amp;&amp; lastPos[stack.peek() - <span class="string">'a'</span>] &gt; i) &#123;</span><br><span class="line">                visited[stack.pop() - <span class="string">'a'</span>] = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 3.b</span></span><br><span class="line">            stack.add(cur);</span><br><span class="line">            visited[cur - <span class="string">'a'</span>] = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        StringBuilder str = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty()) &#123;</span><br><span class="line">            str.insert(<span class="number">0</span>, stack.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Solution 2 Array</p>
<ul>
<li>思路和stack一样但是不需要用到stack</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">removeDuplicateLetters</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] count = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">boolean</span>[] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">char</span>[] charArr = s.toCharArray();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c : charArr) &#123;</span><br><span class="line">            count[c - <span class="string">'a'</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> i =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c : charArr) &#123;</span><br><span class="line">            count[c - <span class="string">'a'</span>]--;</span><br><span class="line">            <span class="keyword">if</span>(visited[c- <span class="string">'a'</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">while</span>(i &gt;<span class="number">0</span> &amp;&amp; charArr[i-<span class="number">1</span>] &gt;= c &amp;&amp; count[charArr[i-<span class="number">1</span>]-<span class="string">'a'</span>]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                visited[charArr[i-<span class="number">1</span>]-<span class="string">'a'</span>] = <span class="keyword">false</span>;</span><br><span class="line">                i--;</span><br><span class="line">            &#125;</span><br><span class="line">            charArr[i] = c;</span><br><span class="line">            visited[c -<span class="string">'a'</span>] = <span class="keyword">true</span>;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(charArr).substring(<span class="number">0</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="344-Reverse-String-Easy"><a href="#344-Reverse-String-Easy" class="headerlink" title="344. Reverse String (Easy) @"></a>344. Reverse String (Easy) <a href="https://leetcode.com/problems/reverse-string/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Write a function that reverses a string. The input string is given as an array of characters <code>char[]</code>.</p>
<p>Do not allocate extra space for another array, you must do this by <strong>modifying the input array <a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank" rel="noopener">in-place</a></strong> with O(1) extra memory.</p>
<p>You may assume all the characters consist of <a href="https://en.wikipedia.org/wiki/ASCII#Printable_characters" target="_blank" rel="noopener">printable ascii characters</a>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: [&quot;h&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;]</span><br><span class="line">&gt; Output: [&quot;o&quot;,&quot;l&quot;,&quot;l&quot;,&quot;e&quot;,&quot;h&quot;]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: [&quot;H&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;h&quot;]</span><br><span class="line">&gt; Output: [&quot;h&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;H&quot;]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Solution Swap</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverseString</span><span class="params">(<span class="keyword">char</span>[] s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length == <span class="number">0</span> || s == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length/<span class="number">2</span>; i++) &#123;</span><br><span class="line">            swap(s, i, s.length-i-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">char</span>[] s, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> temp = s[i];</span><br><span class="line">        s[i] = s[j];</span><br><span class="line">        s[j] = temp;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="345-Reverse-Vowels-of-a-String-Easy"><a href="#345-Reverse-Vowels-of-a-String-Easy" class="headerlink" title="345. Reverse Vowels of a String (Easy) @"></a>345. Reverse Vowels of a String (Easy) <a href="https://leetcode.com/problems/reverse-vowels-of-a-string/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Write a function that takes a string as input and reverse only the vowels of a string.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: &quot;hello&quot;</span><br><span class="line">&gt; Output: &quot;holle&quot;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: &quot;leetcode&quot;</span><br><span class="line">&gt; Output: &quot;leotcede&quot;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Note:</strong><br>The vowels does not include the letter “y”.</p>
</blockquote>
<p>Solution </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reverseVowels</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] arr = s.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> left =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right =arr.length-<span class="number">1</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">while</span>(left&lt;right)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(!isVowel(s.charAt(left))&amp;&amp;left&lt;right)</span><br><span class="line">                left++;</span><br><span class="line">            <span class="keyword">while</span>(!isVowel(s.charAt(right))&amp;&amp;left&lt;right)</span><br><span class="line">                right--;</span><br><span class="line">            swap(left,right,arr);</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(arr);</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isVowel</span><span class="params">(<span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">'a'</span>||c==<span class="string">'e'</span>||c==<span class="string">'i'</span>||c==<span class="string">'o'</span>||c==<span class="string">'u'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">'A'</span>||c==<span class="string">'E'</span>||c==<span class="string">'I'</span>||c==<span class="string">'O'</span>||c==<span class="string">'U'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j,<span class="keyword">char</span>[] arr)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> tmp = arr[i];</span><br><span class="line">        arr[i] =arr[j];</span><br><span class="line">        arr[j]=tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="383-Ransom-Note-Easy"><a href="#383-Ransom-Note-Easy" class="headerlink" title="383. Ransom Note (Easy) @"></a>383. Ransom Note (Easy) <a href="https://leetcode.com/problems/ransom-note/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Given an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return true if the ransom note can be constructed from the magazines ; otherwise, it will return false.</p>
<p>Each letter in the magazine string can only be used once in your ransom note.</p>
<p><strong>Note:</strong><br>You may assume that both strings contain only lowercase letters.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; canConstruct(&quot;a&quot;, &quot;b&quot;) -&gt; false</span><br><span class="line">&gt; canConstruct(&quot;aa&quot;, &quot;ab&quot;) -&gt; false</span><br><span class="line">&gt; canConstruct(&quot;aa&quot;, &quot;aab&quot;) -&gt; true</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Solution 1 Hash Map</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canConstruct</span><span class="params">(String ransomNote, String magazine)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//generate hash map of magazine</span></span><br><span class="line">        HashMap&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; magazine.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = magazine.charAt(i);</span><br><span class="line">            map.put(c, map.getOrDefault(c, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//update the num of characters in map</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ransomNote.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = ransomNote.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (!map.containsKey(c))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            map.put(c, map.get(c)-<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (map.get(c) &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Solution 2 String to Array</p>
<ul>
<li>字符转化为数字对应</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canConstruct</span><span class="params">(String ransomNote, String magazine)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> ch: magazine.toCharArray()) &#123;</span><br><span class="line">            count[ch - <span class="string">'a'</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> ch: ransomNote.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span>(count[ch - <span class="string">'a'</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            count[ch - <span class="string">'a'</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Solution 3</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canConstruct</span><span class="params">(String ransomNote, String magazine)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//若magazine比ransomNote短则一定不可能</span></span><br><span class="line">        <span class="keyword">if</span> (magazine.length() &lt; ransomNote.length()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">char</span>[] r = ransomNote.toCharArray();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] list = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : r) &#123;</span><br><span class="line">            <span class="comment">//判断mag中是否还有c</span></span><br><span class="line">            <span class="comment">//public int indexOf(int char, int fromIndex)</span></span><br><span class="line">            idx = magazine.indexOf(c, list[c - <span class="string">'a'</span>]);</span><br><span class="line">            <span class="keyword">if</span> (idx &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//使用过之后向后移动idx</span></span><br><span class="line">            list[c - <span class="string">'a'</span>] = idx + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="387-First-Unique-Character-in-a-String-Easy"><a href="#387-First-Unique-Character-in-a-String-Easy" class="headerlink" title="387. First Unique Character in a String (Easy)  @"></a>387. First Unique Character in a String (Easy)  <a href="https://leetcode.com/problems/first-unique-character-in-a-string/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Given a string, find the first non-repeating character in it and return it’s index. If it doesn’t exist, return -1.</p>
<p><strong>Examples:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; s = &quot;leetcode&quot;</span><br><span class="line">&gt; return 0.</span><br><span class="line">&gt; </span><br><span class="line">&gt; s = &quot;loveleetcode&quot;,</span><br><span class="line">&gt; return 2.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Note:</strong> You may assume the string contain only lowercase letters.</p>
</blockquote>
<p>Solution Hash Map</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">firstUniqChar</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//generate and update hashmap</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">            map.put(c, map.getOrDefault(c, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//traverse the map</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map.get(s.charAt(i)) == <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><h3 id="54-Spiral-Matrix-Medium"><a href="#54-Spiral-Matrix-Medium" class="headerlink" title="54. Spiral Matrix (Medium) @"></a>54. Spiral Matrix (Medium) <a href="https://leetcode.com/problems/spiral-matrix/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Given a matrix of <em>m</em> x <em>n</em> elements (<em>m</em> rows, <em>n</em> columns), return all elements of the matrix in spiral order.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input:</span><br><span class="line">&gt; [</span><br><span class="line">&gt; [ 1, 2, 3 ],</span><br><span class="line">&gt; [ 4, 5, 6 ],</span><br><span class="line">&gt; [ 7, 8, 9 ]</span><br><span class="line">&gt; ]</span><br><span class="line">&gt; Output: [1,2,3,6,9,8,7,4,5]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input:</span><br><span class="line">&gt; [</span><br><span class="line">&gt; [1, 2, 3, 4],</span><br><span class="line">&gt; [5, 6, 7, 8],</span><br><span class="line">&gt; [9,10,11,12]</span><br><span class="line">&gt; ]</span><br><span class="line">&gt; Output: [1,2,3,4,8,12,11,10,9,5,6,7]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Solution 1 Simulation<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">spiralOrder</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="keyword">if</span> (matrix == <span class="keyword">null</span> || matrix.length == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        <span class="keyword">int</span> R = matrix.length, C = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">boolean</span>[][] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[R][C];</span><br><span class="line">        <span class="keyword">int</span>[] dr = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] dc = &#123;<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> r = <span class="number">0</span>, c = <span class="number">0</span>, di = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; R*C; i++) &#123;</span><br><span class="line">            res.add(matrix[r][c]);</span><br><span class="line">            visited[r][c] = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">int</span> cur_c = c + dc[di];</span><br><span class="line">            <span class="keyword">int</span> cur_r = r + dr[di];</span><br><span class="line">            <span class="keyword">if</span> (cur_c &gt;= <span class="number">0</span> &amp;&amp; cur_c &lt; C &amp;&amp; cur_r &gt;= <span class="number">0</span> &amp;&amp; cur_r &lt; R &amp;&amp; !visited[cur_r][cur_c]) &#123;</span><br><span class="line">                c = cur_c;</span><br><span class="line">                r = cur_r;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                di = (di + <span class="number">1</span>) % <span class="number">4</span>;</span><br><span class="line">                c += dc[di];</span><br><span class="line">                r += dr[di];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Solution 2 Layer by Layer</p>
<ul>
<li>For each outer layer, we want to iterate through its elements in clockwise order starting from the top left corner. Suppose the current outer layer has top-left coordinates (r1, c1) and bottom-right coordinates (r2, c2).</li>
<li>top : c from c1 …… c2</li>
<li>right : r from r1+1 …… r2</li>
<li>bottom : c from c2-1 …… c1+1</li>
<li>left : r from r2 …… r1-1<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">spiralOrder</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="keyword">if</span> (matrix == <span class="keyword">null</span> || matrix.length == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        <span class="keyword">int</span> r1 = <span class="number">0</span>, r2 = matrix.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> c1 = <span class="number">0</span>, c2 = matrix[<span class="number">0</span>].length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (r1 &lt;= r2 &amp;&amp; c1 &lt;= c2) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> c = c1; c &lt;= c2; c++) res.add(matrix[r1][c]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> r = r1+<span class="number">1</span>; r &lt;= r2; r++) res.add(matrix[r][c2]);</span><br><span class="line">            <span class="keyword">if</span> (r1 &lt; r2 &amp;&amp; c1 &lt; c2) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> c = c2 - <span class="number">1</span>; c &gt; c1; c--) res.add(matrix[r2][c]);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> r = r2; r &gt; r1; r--) res.add(matrix[r][c1]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//move top-left and bottom-right point</span></span><br><span class="line">            r1++;</span><br><span class="line">            c1++;</span><br><span class="line">            r2--;</span><br><span class="line">            c2--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="56-Merge-Intervals-Medium"><a href="#56-Merge-Intervals-Medium" class="headerlink" title="56. Merge Intervals (Medium) @"></a>56. Merge Intervals (Medium) <a href="https://leetcode.com/problems/merge-intervals/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Given a collection of intervals, merge all overlapping intervals.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: [[1,3],[2,6],[8,10],[15,18]]</span><br><span class="line">&gt; Output: [[1,6],[8,10],[15,18]]</span><br><span class="line">&gt; Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: [[1,4],[4,5]]</span><br><span class="line">&gt; Output: [[1,5]]</span><br><span class="line">&gt; Explanation: Intervals [1,4] and [4,5] are considered overlapping.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>NOTE:</strong> input types have been changed on April 15, 2019. Please reset to default code definition to get new method signature.</p>
</blockquote>
<p>Solution Sort + Compare</p>
<ul>
<li>按照start排序，然后相邻之间比较</li>
<li><a href="https://blog.csdn.net/wqh8522/article/details/79745350" target="_blank" rel="noopener">Lambda表达式</a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] merge(<span class="keyword">int</span>[][] intervals) &#123;</span><br><span class="line">        <span class="keyword">if</span> (intervals.length &lt;= <span class="number">1</span>) <span class="keyword">return</span> intervals;</span><br><span class="line">        <span class="comment">//sorted by start</span></span><br><span class="line">        Arrays.sort(intervals,(i1, i2) -&gt; Integer.compare(i1[<span class="number">0</span>], i2[<span class="number">0</span>]));</span><br><span class="line">        </span><br><span class="line">        List&lt;<span class="keyword">int</span>[]&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span>[] newInterval = intervals[<span class="number">0</span>];</span><br><span class="line">        res.add(newInterval);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] interval : intervals) &#123;</span><br><span class="line">            <span class="comment">//前一个右界大于等于后一个左界</span></span><br><span class="line">            <span class="keyword">if</span> (newInterval[<span class="number">1</span>] &gt;= interval[<span class="number">0</span>]) &#123;</span><br><span class="line">                newInterval[<span class="number">1</span>] = Math.max(newInterval[<span class="number">1</span>], interval[<span class="number">1</span>]);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                newInterval = interval;</span><br><span class="line">                res.add(newInterval);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.toArray(<span class="keyword">new</span> <span class="keyword">int</span>[res.size()][]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="66-Plus-One-Easy"><a href="#66-Plus-One-Easy" class="headerlink" title="66. Plus One (Easy) @"></a>66. Plus One (Easy) <a href="https://leetcode.com/problems/plus-one/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Given a <strong>non-empty</strong> array of digits representing a non-negative integer, plus one to the integer.</p>
<p>The digits are stored such that the most significant digit is at the head of the list, and each element in the array contain a single digit.</p>
<p>You may assume the integer does not contain any leading zero, except the number 0 itself.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: [1,2,3]</span><br><span class="line">&gt; Output: [1,2,4]</span><br><span class="line">&gt; Explanation: The array represents the integer 123.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: [4,3,2,1]</span><br><span class="line">&gt; Output: [4,3,2,2]</span><br><span class="line">&gt; Explanation: The array represents the integer 4321.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Solution</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] plusOne(<span class="keyword">int</span>[] digits) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = digits.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            digits[i]++;</span><br><span class="line">            digits[i] %= <span class="number">10</span>;</span><br><span class="line">            <span class="comment">//若进位则继续遍历，若不进位则直接返回</span></span><br><span class="line">            <span class="keyword">if</span> (digits[i] != <span class="number">0</span>) <span class="keyword">return</span> digits;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//only 99,999...need one more digit</span></span><br><span class="line">        digits = <span class="keyword">new</span> <span class="keyword">int</span>[digits.length+<span class="number">1</span>];</span><br><span class="line">        digits[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> digits;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="73-Set-Matrix-Zeros-Medium"><a href="#73-Set-Matrix-Zeros-Medium" class="headerlink" title="73. Set Matrix Zeros (Medium) @"></a>73. Set Matrix Zeros (Medium) <a href="https://leetcode.com/problems/set-matrix-zeroes/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Given a <em>m</em> x <em>n</em> matrix, if an element is 0, set its entire row and column to 0. Do it <a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank" rel="noopener"><strong>in-place</strong></a>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: </span><br><span class="line">&gt; [</span><br><span class="line">&gt; [1,1,1],</span><br><span class="line">&gt; [1,0,1],</span><br><span class="line">&gt; [1,1,1]</span><br><span class="line">&gt; ]</span><br><span class="line">&gt; Output: </span><br><span class="line">&gt; [</span><br><span class="line">&gt; [1,0,1],</span><br><span class="line">&gt; [0,0,0],</span><br><span class="line">&gt; [1,0,1]</span><br><span class="line">&gt; ]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: </span><br><span class="line">&gt; [</span><br><span class="line">&gt; [0,1,2,0],</span><br><span class="line">&gt; [3,4,5,2],</span><br><span class="line">&gt; [1,3,1,5]</span><br><span class="line">&gt; ]</span><br><span class="line">&gt; Output: </span><br><span class="line">&gt; [</span><br><span class="line">&gt; [0,0,0,0],</span><br><span class="line">&gt; [0,4,5,0],</span><br><span class="line">&gt; [0,3,1,0]</span><br><span class="line">&gt; ]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Follow up:</strong></p>
<ul>
<li>A straight forward solution using O(<em>m**n</em>) space is probably a bad idea.</li>
<li>A simple improvement uses O(<em>m</em> + <em>n</em>) space, but still not the best solution.</li>
<li>Could you devise a constant space solution?</li>
</ul>
</blockquote>
<p>Solution </p>
<ul>
<li>Use first row and first column to mark if the row/col needs to be set to 0. (Postpone the change)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setZeroes</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">    Boolean isCol = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">int</span> R = matrix.length;</span><br><span class="line">    <span class="keyword">int</span> C = matrix[<span class="number">0</span>].length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; R; i++) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Since first cell for both first row and first column is the same i.e. matrix[0][0]</span></span><br><span class="line">      <span class="comment">// We can use an additional variable for either the first row/column.</span></span><br><span class="line">      <span class="comment">// For this solution we are using an additional variable for the first column</span></span><br><span class="line">      <span class="comment">// and using matrix[0][0] for the first row.</span></span><br><span class="line">      <span class="keyword">if</span> (matrix[i][<span class="number">0</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">        isCol = <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; C; j++) &#123;</span><br><span class="line">        <span class="comment">// If an element is zero, we set the first element of the corresponding row and column to 0</span></span><br><span class="line">        <span class="keyword">if</span> (matrix[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">          matrix[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">          matrix[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Iterate over the array once again and using the first row and first column, update the elements.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; R; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; C; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix[i][<span class="number">0</span>] == <span class="number">0</span> || matrix[<span class="number">0</span>][j] == <span class="number">0</span>) &#123;</span><br><span class="line">          matrix[i][j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// See if the first row needs to be set to zero as well</span></span><br><span class="line">    <span class="keyword">if</span> (matrix[<span class="number">0</span>][<span class="number">0</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; C; j++) &#123;</span><br><span class="line">        matrix[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// See if the first column needs to be set to zero as well</span></span><br><span class="line">    <span class="keyword">if</span> (isCol) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; R; i++) &#123;</span><br><span class="line">        matrix[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="75-Sort-Colors-Medium"><a href="#75-Sort-Colors-Medium" class="headerlink" title="75. Sort Colors (Medium) @"></a>75. Sort Colors (Medium) <a href="https://leetcode.com/problems/sort-colors/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Given an array with <em>n</em> objects colored red, white or blue, sort them <strong><a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank" rel="noopener">in-place</a></strong> so that objects of the same color are adjacent, with the colors in the order red, white and blue.</p>
<p>Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.</p>
<p><strong>Note:</strong> You are not suppose to use the library’s sort function for this problem.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: [2,0,2,1,1,0]</span><br><span class="line">&gt; Output: [0,0,1,1,2,2]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Follow up:</strong></p>
<ul>
<li>A rather straight forward solution is a two-pass algorithm using counting sort.<br>First, iterate the array counting number of 0’s, 1’s, and 2’s, then overwrite array with total number of 0’s, then 1’s and followed by 2’s.</li>
<li>Could you come up with a one-pass algorithm using only constant space?</li>
</ul>
</blockquote>
<p>Solution</p>
<ul>
<li>red replace forward, blue replace backward <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sortColors</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> red = <span class="number">0</span>, blue = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (red &lt;= blue &amp;&amp; i &lt;= blue) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                swap(nums, red, i);</span><br><span class="line">                red++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (nums[i] == <span class="number">2</span>) &#123;</span><br><span class="line">                swap(nums, i, blue);</span><br><span class="line">                blue--;</span><br><span class="line">                i--; <span class="comment">//re-evaluate current element</span></span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = nums[i];</span><br><span class="line">        nums[i] = nums[j];</span><br><span class="line">        nums[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="88-Merge-Sorted-Array-Easy"><a href="#88-Merge-Sorted-Array-Easy" class="headerlink" title="88. Merge Sorted Array (Easy) @"></a>88. Merge Sorted Array (Easy) <a href="https://leetcode.com/problems/merge-sorted-array/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Given two sorted integer arrays <em>nums1</em> and <em>nums2</em>, merge <em>nums2</em> into <em>nums1</em> as one sorted array.</p>
<p><strong>Note:</strong></p>
<ul>
<li>The number of elements initialized in <em>nums1</em> and <em>nums2</em> are <em>m</em> and <em>n</em> respectively.</li>
<li>You may assume that <em>nums1</em> has enough space (size that is greater or equal to <em>m</em> + <em>n</em>) to hold additional elements from <em>nums2</em>.</li>
</ul>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input:</span><br><span class="line">&gt; nums1 = [1,2,3,0,0,0], m = 3</span><br><span class="line">&gt; nums2 = [2,5,6],       n = 3</span><br><span class="line">&gt; </span><br><span class="line">&gt; Output: [1,2,2,3,5,6]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Solution</p>
<ul>
<li>从后向前扫描，添加大的元素<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span> m, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//two pointer for nums1 and nums2</span></span><br><span class="line">        <span class="keyword">int</span> ptr1 = m - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> ptr2 = n - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//pointer for insert position</span></span><br><span class="line">        <span class="keyword">int</span> p = m + n - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//compare back forward</span></span><br><span class="line">        <span class="keyword">while</span> (ptr1 &gt;= <span class="number">0</span> &amp;&amp; ptr2 &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums1[ptr1] &gt; nums2[ptr2]) &#123;</span><br><span class="line">                nums1[p--] = nums1[ptr1--];</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                nums1[p--] = nums2[ptr2--];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//add remaining nums in nums2</span></span><br><span class="line">        <span class="comment">//public static void arraycopy(Object src, int srcPos, Object dest, int destPos, int length)</span></span><br><span class="line">        System.arraycopy(nums2, <span class="number">0</span>, nums1, <span class="number">0</span>, ptr2 + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="118-Pascal‘s-Triangle-Easy"><a href="#118-Pascal‘s-Triangle-Easy" class="headerlink" title="118. Pascal‘s Triangle (Easy) @"></a>118. Pascal‘s Triangle (Easy) <a href="https://leetcode.com/problems/pascals-triangle/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Given a non-negative integer <em>numRows</em>, generate the first <em>numRows</em> of Pascal’s triangle.</p>
<p>In Pascal’s triangle, each number is the sum of the two numbers directly above it.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: 5</span><br><span class="line">&gt; Output:</span><br><span class="line">&gt; [</span><br><span class="line">&gt;   [1],</span><br><span class="line">&gt;  [1,1],</span><br><span class="line">&gt; [1,2,1],</span><br><span class="line">&gt; [1,3,3,1],</span><br><span class="line">&gt; [1,4,6,4,1]</span><br><span class="line">&gt; ]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Solution DP</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; generate(<span class="keyword">int</span> numRows) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; triangle = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// First base case; if user requests zero rows, they get zero rows.</span></span><br><span class="line">        <span class="keyword">if</span> (numRows == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> triangle;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Second base case; first row is always [1].</span></span><br><span class="line">        triangle.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        triangle.get(<span class="number">0</span>).add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> rowNum = <span class="number">1</span>; rowNum &lt; numRows; rowNum++) &#123;</span><br><span class="line">            List&lt;Integer&gt; row = <span class="keyword">new</span> ArrayList&lt;&gt;(Integer);</span><br><span class="line">            List&lt;Integer&gt; prevRow = triangle.get(rowNum-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// The first row element is always 1.</span></span><br><span class="line">            row.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Each triangle element (other than the first and last of each row)</span></span><br><span class="line">            <span class="comment">// is equal to the sum of the elements above-and-to-the-left and</span></span><br><span class="line">            <span class="comment">// above-and-to-the-right.</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; rowNum; j++) &#123;</span><br><span class="line">                row.add(prevRow.get(j-<span class="number">1</span>) + prevRow.get(j));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// The last row element is always 1.</span></span><br><span class="line">            row.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            triangle.add(row);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> triangle;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="136-Single-Number-Easy"><a href="#136-Single-Number-Easy" class="headerlink" title="136. Single Number (Easy) @"></a>136. Single Number (Easy) <a href="https://leetcode.com/problems/single-number/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Given a <strong>non-empty</strong> array of integers, every element appears <em>twice</em> except for one. Find that single one.</p>
<p><strong>Note:</strong></p>
<p>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: [2,2,1]</span><br><span class="line">&gt; Output: 1</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: [4,1,2,1,2]</span><br><span class="line">&gt; Output: 4</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Solution 1 Hash Map</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(num)) &#123;</span><br><span class="line">                map.remove(num);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                map.put(num, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map.entrySet().iterator().next().getKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Solution 2 Math</p>
<ul>
<li>所有不重复数字的两倍乘总和 - 原数组总和 = 出现一次的数字<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> arrSum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">            set.add(num);</span><br><span class="line">            arrSum += num;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> doubleSum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : set) &#123;</span><br><span class="line">            doubleSum += <span class="number">2</span>*num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> doubleSum - arrSum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>Solution 3 Bit Manipulation</p>
<ul>
<li>异或XOR</li>
<li>对所有数字进行异或，最后得出单个的数</li>
<li>异或性质<ul>
<li>交换律: A XOR B = B XOR A</li>
<li>结合律: A XOR B XOR C = A XOR (B XOR C) = (A XOR B) XOR C</li>
<li>自反性: A XOR B XOR B = A XOR 0 = A<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">            res ^= num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="169-Majority-Element-Easy"><a href="#169-Majority-Element-Easy" class="headerlink" title="169. Majority Element (Easy) @"></a>169. Majority Element (Easy) <a href="https://leetcode.com/problems/majority-element/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Given an array of size <em>n</em>, find the majority element. The majority element is the element that appears <strong>more than</strong> <code>⌊ n/2 ⌋</code> times.</p>
<p>You may assume that the array is non-empty and the majority element always exist in the array.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: [3,2,3]</span><br><span class="line">&gt; Output: 3</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: [2,2,1,1,1,2,2]</span><br><span class="line">&gt; Output: 2</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Solution 1 HashMap</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> N = nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            map.put(nums[i], map.getOrDefault(nums[i], <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer,Integer&gt; s : map.entrySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.getValue() &gt; N/<span class="number">2</span>) &#123;</span><br><span class="line">                res = s.getKey();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Solution 2 Sort</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">return</span> nums[nums.length/<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Solution 3 摩尔投票法</p>
<ul>
<li>首先假定数组头元素即为众数，设定计数器为1，从第二个数开始遍历，如果和头元素相同则计数器加1，如果不相同则减1，之后判断计数器是否为0，如果不为0则继续下一步循环，如果为0则将众数指针指向当前元素，以此类推，最后众数指针指向的元素即为众数，时间复杂度～O(n)，空间复杂度～O(1)</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == res) count++;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                count--;</span><br><span class="line">                <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">                    res = nums[i];</span><br><span class="line">                    count = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="189-Rotate-Array-Easy"><a href="#189-Rotate-Array-Easy" class="headerlink" title="189. Rotate Array (Easy) @"></a>189. Rotate Array (Easy) <a href="https://leetcode.com/problems/rotate-array/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Given an array, rotate the array to the right by <em>k</em> steps, where <em>k</em> is non-negative.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: [1,2,3,4,5,6,7] and k = 3</span><br><span class="line">&gt; Output: [5,6,7,1,2,3,4]</span><br><span class="line">&gt; Explanation:</span><br><span class="line">&gt; rotate 1 steps to the right: [7,1,2,3,4,5,6]</span><br><span class="line">&gt; rotate 2 steps to the right: [6,7,1,2,3,4,5]</span><br><span class="line">&gt; rotate 3 steps to the right: [5,6,7,1,2,3,4]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: [-1,-100,3,99] and k = 2</span><br><span class="line">&gt; Output: [3,99,-1,-100]</span><br><span class="line">&gt; Explanation: </span><br><span class="line">&gt; rotate 1 steps to the right: [99,-1,-100,3]</span><br><span class="line">&gt; rotate 2 steps to the right: [3,99,-1,-100]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li>Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.</li>
<li>Could you do it in-place with O(1) extra space?</li>
</ul>
</blockquote>
<p>Solution 1 Extra Array</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = nums.length;</span><br><span class="line">        <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            temp[(i+k) % N] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            nums[i] = temp[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Solution 2 Cyclic Replacements</p>
<ul>
<li><a href="https://leetcode-cn.com/problems/rotate-array/solution/xuan-zhuan-shu-zu-by-leetcode/" target="_blank" rel="noopener">Leetcode CN</a></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> start = <span class="number">0</span>; count &lt; nums.length; start++) &#123;</span><br><span class="line">            <span class="keyword">int</span> cur = start;</span><br><span class="line">            <span class="keyword">int</span> prev = nums[cur];</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> next = (cur + k) % nums.length;</span><br><span class="line">                <span class="keyword">int</span> temp = nums[next];</span><br><span class="line">                nums[next] = prev;</span><br><span class="line">                prev = temp;</span><br><span class="line">                cur = next;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;<span class="keyword">while</span> (start != cur);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Solution 3 Reverse</p>
<ul>
<li>先反转所有，再分别反转前k个位置和后面所有<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        k %= nums.length;</span><br><span class="line">        reverse(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">        reverse(nums, <span class="number">0</span>, k - <span class="number">1</span>);</span><br><span class="line">        reverse(nums, k, nums.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = nums[start];</span><br><span class="line">            nums[start] = nums[end];</span><br><span class="line">            nums[end] = temp;</span><br><span class="line">            start++;</span><br><span class="line">            end--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Linked-List"><a href="#Linked-List" class="headerlink" title="Linked List"></a>Linked List</h2><h3 id="138-Copy-List-with-Random-Pointer-Medium"><a href="#138-Copy-List-with-Random-Pointer-Medium" class="headerlink" title="138. Copy List with Random Pointer (Medium) @"></a>138. Copy List with Random Pointer (Medium) <a href="https://leetcode.com/problems/copy-list-with-random-pointer/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.</p>
<p>Return a <a href="https://en.wikipedia.org/wiki/Object_copying#Deep_copy" target="_blank" rel="noopener"><strong>deep copy</strong></a> of the list.</p>
<p>The Linked List is represented in the input/output as a list of <code>n</code> nodes. Each node is represented as a pair of <code>[val, random_index]</code> where:</p>
<ul>
<li><code>val</code>: an integer representing <code>Node.val</code></li>
<li><code>random_index</code>: the index of the node (range from <code>0</code> to <code>n-1</code>) where random pointer points to, or <code>null</code> if it does not point to any node.</li>
</ul>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2019/12/18/e1.png" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]</span><br><span class="line">&gt; Output: [[7,null],[13,0],[11,4],[10,2],[1,0]]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2019/12/18/e2.png" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: head = [[1,1],[2,1]]</span><br><span class="line">&gt; Output: [[1,1],[2,1]]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 3:</strong></p>
<p><strong><img src="https://assets.leetcode.com/uploads/2019/12/18/e3.png" alt="img"></strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: head = [[3,null],[3,0],[3,null]]</span><br><span class="line">&gt; Output: [[3,null],[3,0],[3,null]]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 4:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: head = []</span><br><span class="line">&gt; Output: []</span><br><span class="line">&gt; Explanation: Given linked list is empty (null pointer), so return null.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Solution 1 HashMap + 2 iterations </p>
<p>第一种方法，就是使用HashMap来坐，HashMap的key存原始pointer，value存新的pointer。</p>
<ul>
<li>第一遍，先不copy random的值，只copy数值建立好新的链表。并把新旧pointer存在HashMap中。</li>
<li>第二遍，遍历旧表，复制random的值，因为第一遍已经把链表复制好了并且也存在HashMap里了，所以只需从HashMap中，把当前旧的node.random作为key值，得到新的value的值，并把其赋给新node.random就好。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    Node next;</span></span><br><span class="line"><span class="comment">    Node random;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node(int val) &#123;</span></span><br><span class="line"><span class="comment">        this.val = val;</span></span><br><span class="line"><span class="comment">        this.next = null;</span></span><br><span class="line"><span class="comment">        this.random = null;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">copyRandomList</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        HashMap&lt;Node, Node&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Node newHead = <span class="keyword">new</span> Node(head.val);</span><br><span class="line">        map.put(head, newHead);</span><br><span class="line">        Node oldPtr = head.next;</span><br><span class="line">        Node newPtr = newHead;</span><br><span class="line">        <span class="comment">//first iterate the linked list</span></span><br><span class="line">        <span class="keyword">while</span> (oldPtr != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//link next node</span></span><br><span class="line">            Node newNode = <span class="keyword">new</span> Node(oldPtr.val);</span><br><span class="line">            newPtr.next = newNode;</span><br><span class="line">            <span class="comment">//update hashmap</span></span><br><span class="line">            map.put(oldPtr, newNode);</span><br><span class="line">            </span><br><span class="line">            oldPtr = oldPtr.next;</span><br><span class="line">            newPtr = newPtr.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        oldPtr = head;</span><br><span class="line">        newPtr = newHead;</span><br><span class="line">        <span class="comment">//second iterate the linked list -&gt; update random ptr</span></span><br><span class="line">        <span class="keyword">while</span>(oldPtr != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//update random ptr of new list</span></span><br><span class="line">            newPtr.random = map.get(oldPtr.random);</span><br><span class="line">            </span><br><span class="line">            oldPtr = oldPtr.next;</span><br><span class="line">            newPtr = newPtr.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Solution 2 3-iteration</p>
<p>第二种方法不使用HashMap来做，使空间复杂度降为O(1)，不过需要3次遍历list，时间复杂度为O(3n)=O(n)。</p>
<ul>
<li>第一遍，对每个node进行复制，并插入其原始node的后面，新旧交替，变成重复链表。如：原始：1-&gt;2-&gt;3-&gt;null，复制后：1-&gt;1-&gt;2-&gt;2-&gt;3-&gt;3-&gt;null</li>
<li>第二遍，遍历每个旧node，把旧node的random的复制给新node的random，因为链表已经是新旧交替的。所以复制方法为：<strong>node.next.random = node.random.next</strong> 前面是说旧node的next的random，就是新node的random，后面是旧node的random的next，正好是新node，是从旧random复制来的。</li>
<li>第三遍，则是把新旧两个表拆开，返回新的表即可。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    Node next;</span></span><br><span class="line"><span class="comment">    Node random;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node(int val) &#123;</span></span><br><span class="line"><span class="comment">        this.val = val;</span></span><br><span class="line"><span class="comment">        this.next = null;</span></span><br><span class="line"><span class="comment">        this.random = null;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">copyRandomList</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        Node cur = head;</span><br><span class="line">        <span class="comment">//1st iteration: copy current node and link it to next</span></span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Node newNode = <span class="keyword">new</span> Node(cur.val);</span><br><span class="line">            newNode.next = cur.next;</span><br><span class="line">            cur.next = newNode;</span><br><span class="line">            </span><br><span class="line">            cur = newNode.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2ed iteration: update random node</span></span><br><span class="line">        cur = head;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur.random != <span class="keyword">null</span>) &#123;</span><br><span class="line">                cur.next.random = cur.random.next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3rd iteration: </span></span><br><span class="line">        cur = head; <span class="comment">//point to old node</span></span><br><span class="line">        Node newHead = head.next;<span class="comment">//initialize new head</span></span><br><span class="line">        Node copy = newHead;<span class="comment">//point to new node</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// method 1</span></span><br><span class="line"><span class="comment">//         while (copy.next != null) &#123;</span></span><br><span class="line"><span class="comment">//             //old</span></span><br><span class="line"><span class="comment">//             cur.next = cur.next.next;</span></span><br><span class="line"><span class="comment">//             cur = cur.next;</span></span><br><span class="line">            </span><br><span class="line"><span class="comment">//             //new</span></span><br><span class="line"><span class="comment">//             copy.next = copy.next.next;</span></span><br><span class="line"><span class="comment">//             copy = copy.next;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//         cur.next = cur.next.next;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//method 2</span></span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">            copy = cur.next;</span><br><span class="line">            cur.next = copy.next;</span><br><span class="line">            <span class="keyword">if</span> (copy.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">                copy.next = copy.next.next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="141-Linked-List-Cycle-Easy"><a href="#141-Linked-List-Cycle-Easy" class="headerlink" title="141. Linked List Cycle (Easy) @"></a>141. Linked List Cycle (Easy) <a href="https://leetcode.com/problems/linked-list-cycle/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Given a linked list, determine if it has a cycle in it.</p>
<p>To represent a cycle in the given linked list, we use an integer <code>pos</code> which represents the position (0-indexed) in the linked list where tail connects to. If <code>pos</code> is <code>-1</code>, then there is no cycle in the linked list.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: head = [3,2,0,-4], pos = 1</span><br><span class="line">&gt; Output: true</span><br><span class="line">&gt; Explanation: There is a cycle in the linked list, where tail connects to the second node.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png" alt="img"></p>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: head = [1,2], pos = 0</span><br><span class="line">&gt; Output: true</span><br><span class="line">&gt; Explanation: There is a cycle in the linked list, where tail connects to the first node.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test2.png" alt="img"></p>
<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: head = [1], pos = -1</span><br><span class="line">&gt; Output: false</span><br><span class="line">&gt; Explanation: There is no cycle in the linked list.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png" alt="img"></p>
<p><strong>Follow up:</strong></p>
<p>Can you solve it using <em>O(1)</em> (i.e. constant) memory?</p>
</blockquote>
<p>Solution 1 HashSet</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    Set&lt;ListNode&gt; nodesSeen = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nodesSeen.contains(head)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            nodesSeen.add(head);</span><br><span class="line">        &#125;</span><br><span class="line">        head = head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Solution 2 Two ptrs</p>
<ul>
<li>if slow and fast ptr meet then it much contains a cycle.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        </span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        ListNode fast = head.next;</span><br><span class="line">        <span class="keyword">while</span> (slow != fast) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fast == <span class="keyword">null</span> || fast.next == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="146-LRU-Cache-Medium"><a href="#146-LRU-Cache-Medium" class="headerlink" title="146. LRU Cache (Medium) @"></a>146. LRU Cache (Medium) <a href="https://leetcode.com/problems/lru-cache/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Design and implement a data structure for <a href="https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU" target="_blank" rel="noopener">Least Recently Used (LRU) cache</a>. It should support the following operations: <code>get</code> and <code>put</code>.</p>
<p><code>get(key)</code> - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.<br><code>put(key, value)</code> - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.</p>
<p>The cache is initialized with a <strong>positive</strong> capacity.</p>
<p><strong>Follow up:</strong><br>Could you do both operations in <strong>O(1)</strong> time complexity?</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; LRUCache cache = new LRUCache( 2 /* capacity */ );</span><br><span class="line">&gt; </span><br><span class="line">&gt; cache.put(1, 1);</span><br><span class="line">&gt; cache.put(2, 2);</span><br><span class="line">&gt; cache.get(1);       // returns 1</span><br><span class="line">&gt; cache.put(3, 3);    // evicts key 2</span><br><span class="line">&gt; cache.get(2);       // returns -1 (not found)</span><br><span class="line">&gt; cache.put(4, 4);    // evicts key 1</span><br><span class="line">&gt; cache.get(1);       // returns -1 (not found)</span><br><span class="line">&gt; cache.get(3);       // returns 3</span><br><span class="line">&gt; cache.get(4);       // returns 4</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Solution 1 LinkedHashMap</p>
<ul>
<li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html" target="_blank" rel="noopener">LinkedHashMap</a></li>
<li>LinkedHashMap(int initialCapacity, float loadFactor, boolean accessOrder)</li>
<li>作为一般规则，默认负载因子（0.75）在时间和空间成本上提供了很好的折衷。较高的值会降低空间开销，但提高查找成本（体现在大多数的HashMap类的操作，包括get和put）。设置初始大小时，应该考虑预计的entry数在map及其负载系数，并且尽量减少rehash操作的次数。如果初始容量大于最大条目数除以负载因子，rehash操作将不会发生。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span> <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>&lt;<span class="title">Integer</span>, <span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRUCache</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(capacity, <span class="number">0.75F</span>, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getOrDefault(key, -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">removeEldestEntry</span><span class="params">(Map.Entry&lt;Integer, Integer&gt; eldest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size() &gt; capacity;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your LRUCache object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * LRUCache obj = new LRUCache(capacity);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj.get(key);</span></span><br><span class="line"><span class="comment"> * obj.put(key,value);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<p>Solution 2 Linked List + HashMap (implementation of sol 1)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DLinkedNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> key;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        DLinkedNode prev;</span><br><span class="line">        DLinkedNode next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addNode</span><span class="params">(DLinkedNode node)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//always add node right after head</span></span><br><span class="line">        node.next = head.next;</span><br><span class="line">        node.prev = head;</span><br><span class="line">        </span><br><span class="line">        head.next.prev = node;</span><br><span class="line">        head.next = node;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removeNode</span><span class="params">(DLinkedNode node)</span> </span>&#123;</span><br><span class="line">        node.prev.next = node.next;</span><br><span class="line">        node.next.prev = node.prev;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">moveToHead</span><span class="params">(DLinkedNode node)</span> </span>&#123;</span><br><span class="line">        removeNode(node);</span><br><span class="line">        addNode(node);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> DLinkedNode <span class="title">popTail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DLinkedNode res = tail.prev;</span><br><span class="line">        removeNode(res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;Integer, DLinkedNode&gt; cache = <span class="keyword">new</span> HashMap&lt;Integer, DLinkedNode&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line">    <span class="keyword">private</span> DLinkedNode head, tail;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRUCache</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.size = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        </span><br><span class="line">        head = <span class="keyword">new</span> DLinkedNode();</span><br><span class="line">        tail = <span class="keyword">new</span> DLinkedNode();</span><br><span class="line">        </span><br><span class="line">        head.next = tail;</span><br><span class="line">        tail.prev = head;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        DLinkedNode node = cache.get(key);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) </span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//used =&gt; move to head</span></span><br><span class="line">            moveToHead(node);</span><br><span class="line">            <span class="keyword">return</span> node.val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        DLinkedNode node = cache.get(key);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            DLinkedNode newNode = <span class="keyword">new</span> DLinkedNode();</span><br><span class="line">            newNode.key = key;</span><br><span class="line">            newNode.val = value;</span><br><span class="line">            </span><br><span class="line">            cache.put(key, newNode);<span class="comment">//update cache(HashMap)</span></span><br><span class="line">            addNode(newNode); <span class="comment">//update Linked List</span></span><br><span class="line">            </span><br><span class="line">            size++;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (size &gt; capacity) &#123;</span><br><span class="line">                <span class="comment">//pop tail</span></span><br><span class="line">                DLinkedNode tail = popTail();</span><br><span class="line">                cache.remove(tail.key);</span><br><span class="line">                size--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//update val</span></span><br><span class="line">            node.val = value;</span><br><span class="line">            moveToHead(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your LRUCache object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * LRUCache obj = new LRUCache(capacity);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj.get(key);</span></span><br><span class="line"><span class="comment"> * obj.put(key,value);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<h3 id="148-Sort-List-Medium"><a href="#148-Sort-List-Medium" class="headerlink" title="148. Sort List (Medium) @"></a>148. Sort List (Medium) <a href="https://leetcode.com/problems/sort-list/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Sort a linked list in <em>O</em>(<em>n</em> log <em>n</em>) time using constant space complexity.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: 4-&gt;2-&gt;1-&gt;3</span><br><span class="line">&gt; Output: 1-&gt;2-&gt;3-&gt;4</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: -1-&gt;5-&gt;3-&gt;4-&gt;0</span><br><span class="line">&gt; Output: -1-&gt;0-&gt;3-&gt;4-&gt;5</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Solution 1 Merge sort</p>
<ul>
<li>空间复杂度O(logn)， 不符合要求<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">sortList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//find the mid point</span></span><br><span class="line">        ListNode slow = head, fast = head.next;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//mid = slow</span></span><br><span class="line">        ListNode tmp = slow.next;</span><br><span class="line">        slow.next = <span class="keyword">null</span>; <span class="comment">//cut</span></span><br><span class="line">        <span class="comment">//divide</span></span><br><span class="line">        ListNode left = sortList(head);</span><br><span class="line">        ListNode right = sortList(tmp);</span><br><span class="line">        <span class="comment">//merge</span></span><br><span class="line">        ListNode cur = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode res = cur;</span><br><span class="line">        <span class="keyword">while</span> (left != <span class="keyword">null</span> &amp;&amp; right != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (left.val &lt; right.val) &#123;</span><br><span class="line">                cur.next = left;</span><br><span class="line">                left = left.next;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                cur.next = right;</span><br><span class="line">                right = right.next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//add the rest of left or right part</span></span><br><span class="line">        cur.next = left != <span class="keyword">null</span> ? left : right;</span><br><span class="line">        <span class="keyword">return</span> res.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>Solution 2 Iteration<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">sortList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        </span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        <span class="comment">//len of list</span></span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">            length++;</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        head = dummy.next;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//loop logn times</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i+= i) &#123;</span><br><span class="line">            <span class="comment">//list was divided into 4 parts:</span></span><br><span class="line">            <span class="comment">//1. already sorted; 2. left part of list to be sorted;</span></span><br><span class="line">            <span class="comment">//3. right part of list to be sorted; 4. unsorted part of list</span></span><br><span class="line">            ListNode success = dummy;</span><br><span class="line">            ListNode left = <span class="keyword">null</span>;</span><br><span class="line">            ListNode right = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">                left = head;</span><br><span class="line">                head = cutFromHead(head, i);</span><br><span class="line">                right = head;</span><br><span class="line">                head = cutFromHead(head, i);</span><br><span class="line">                <span class="comment">//merge sort left and right, put them after success, and update success</span></span><br><span class="line">                success.next = mergeLists(left, right);</span><br><span class="line">                <span class="keyword">while</span> (success.next != <span class="keyword">null</span>) success = success.next;</span><br><span class="line">            &#125;</span><br><span class="line">            head = dummy.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cut the list from head with n-len and return (n+1)th node</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ListNode <span class="title">cutFromHead</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="keyword">null</span> &amp;&amp; --n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">        ListNode next = head.next;</span><br><span class="line">        head.next = <span class="keyword">null</span>; <span class="comment">//cut</span></span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//merge sort 2 lists</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ListNode <span class="title">mergeLists</span><span class="params">(ListNode left, ListNode right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left == <span class="keyword">null</span>) <span class="keyword">return</span> right;</span><br><span class="line">        <span class="keyword">if</span> (right == <span class="keyword">null</span>) <span class="keyword">return</span> left;</span><br><span class="line">        </span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">        ListNode cur = dummy;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (left != <span class="keyword">null</span> &amp;&amp; right != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (left.val &lt; right.val) &#123;</span><br><span class="line">                cur.next = left;</span><br><span class="line">                left = left.next;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                cur.next = right;</span><br><span class="line">                right = right.next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur.next = left != <span class="keyword">null</span> ? left : right;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="160-Intersection-of-Two-Linked-Lists-Easy"><a href="#160-Intersection-of-Two-Linked-Lists-Easy" class="headerlink" title="160. Intersection of Two Linked Lists (Easy) @"></a>160. Intersection of Two Linked Lists (Easy) <a href="https://leetcode.com/problems/intersection-of-two-linked-lists/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Write a program to find the node at which the intersection of two singly linked lists begins.</p>
<p>For example, the following two linked lists:</p>
<p><a href="https://assets.leetcode.com/uploads/2018/12/13/160_statement.png" target="_blank" rel="noopener"><img src="https://assets.leetcode.com/uploads/2018/12/13/160_statement.png" alt="img"></a></p>
<p>begin to intersect at node c1.</p>
<p><strong>Example 1:</strong></p>
<p><a href="https://assets.leetcode.com/uploads/2018/12/13/160_example_1.png" target="_blank" rel="noopener"><img src="https://assets.leetcode.com/uploads/2018/12/13/160_example_1.png" alt="img"></a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3</span><br><span class="line">&gt; Output: Reference of the node with value = 8</span><br><span class="line">&gt; Input Explanation: The intersected node&apos;s value is 8 (note that this must not be 0 if the two lists intersect). From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,0,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 2:</strong></p>
<p><a href="https://assets.leetcode.com/uploads/2018/12/13/160_example_2.png" target="_blank" rel="noopener"><img src="https://assets.leetcode.com/uploads/2018/12/13/160_example_2.png" alt="img"></a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1</span><br><span class="line">&gt; Output: Reference of the node with value = 2</span><br><span class="line">&gt; Input Explanation: The intersected node&apos;s value is 2 (note that this must not be 0 if the two lists intersect). From the head of A, it reads as [0,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 3:</strong></p>
<p><a href="https://assets.leetcode.com/uploads/2018/12/13/160_example_3.png" target="_blank" rel="noopener"><img src="https://assets.leetcode.com/uploads/2018/12/13/160_example_3.png" alt="img"></a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2</span><br><span class="line">&gt; Output: null</span><br><span class="line">&gt; Input Explanation: From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.</span><br><span class="line">&gt; Explanation: The two lists do not intersect, so return null.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Notes:</strong></p>
<ul>
<li>If the two linked lists have no intersection at all, return <code>null</code>.</li>
<li>The linked lists must retain their original structure after the function returns.</li>
<li>You may assume there are no cycles anywhere in the entire linked structure.</li>
<li>Your code should preferably run in O(n) time and use only O(1) memory.</li>
</ul>
</blockquote>
<p>Solution 1 Two round iteration</p>
<ul>
<li>尾部对齐，找出长度差，长的先走<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lenA=<span class="number">0</span>, lenB=<span class="number">0</span>;</span><br><span class="line">        ListNode A=headA, B=headB;</span><br><span class="line">        <span class="keyword">while</span>(A != <span class="keyword">null</span>)&#123;</span><br><span class="line">            lenA ++;</span><br><span class="line">            A = A.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(B != <span class="keyword">null</span>) &#123;</span><br><span class="line">            lenB++;</span><br><span class="line">            B = B.next;</span><br><span class="line">        &#125;</span><br><span class="line">        A = headA;</span><br><span class="line">        B = headB;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(lenA &gt; lenB)&#123;</span><br><span class="line">            A = A.next;</span><br><span class="line">            lenA --;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(lenA &lt; lenB)&#123;</span><br><span class="line">            B = B.next;</span><br><span class="line">            lenB --;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(A != B)&#123;</span><br><span class="line">            A = A.next;</span><br><span class="line">            B = B.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> A;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>Solution 2 Two pointer + 环</p>
<ul>
<li>转化成判断环的问题<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (headA == <span class="keyword">null</span> || headB == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">        ListNode curA = headA;</span><br><span class="line">        ListNode curB = headB;</span><br><span class="line">        <span class="comment">//将自身最后连接到另一个链表头，若存在intersection则形成环</span></span><br><span class="line">        <span class="comment">//如果形成环，则curA和curB一定在环的入口相交</span></span><br><span class="line">        <span class="comment">//若没有形成环，则都到达null</span></span><br><span class="line">        <span class="keyword">while</span> (curA != curB) &#123;</span><br><span class="line">            curA = curA == <span class="keyword">null</span> ? headB : curA.next;</span><br><span class="line">            curB = curB == <span class="keyword">null</span> ? headA : curB.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> curA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h2><h3 id="150-Evaluate-Reverse-Polish-Notation-Medium"><a href="#150-Evaluate-Reverse-Polish-Notation-Medium" class="headerlink" title="150. Evaluate Reverse Polish Notation (Medium) @"></a>150. Evaluate Reverse Polish Notation (Medium) <a href="https://leetcode.com/problems/evaluate-reverse-polish-notation/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Evaluate the value of an arithmetic expression in <a href="http://en.wikipedia.org/wiki/Reverse_Polish_notation" target="_blank" rel="noopener">Reverse Polish Notation</a>.</p>
<p>Valid operators are <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>. Each operand may be an integer or another expression.</p>
<p><strong>Note:</strong></p>
<ul>
<li>Division between two integers should truncate toward zero.</li>
<li>The given RPN expression is always valid. That means the expression would always evaluate to a result and there won’t be any divide by zero operation.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: [&quot;2&quot;, &quot;1&quot;, &quot;+&quot;, &quot;3&quot;, &quot;*&quot;]</span><br><span class="line">&gt; Output: 9</span><br><span class="line">&gt; Explanation: ((2 + 1) * 3) = 9</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: [&quot;4&quot;, &quot;13&quot;, &quot;5&quot;, &quot;/&quot;, &quot;+&quot;]</span><br><span class="line">&gt; Output: 6</span><br><span class="line">&gt; Explanation: (4 + (13 / 5)) = 6</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: [&quot;10&quot;, &quot;6&quot;, &quot;9&quot;, &quot;3&quot;, &quot;+&quot;, &quot;-11&quot;, &quot;*&quot;, &quot;/&quot;, &quot;*&quot;, &quot;17&quot;, &quot;+&quot;, &quot;5&quot;, &quot;+&quot;]</span><br><span class="line">&gt; Output: 22</span><br><span class="line">&gt; Explanation: </span><br><span class="line">&gt;   ((10 * (6 / ((9 + 3) * -11))) + 17) + 5</span><br><span class="line">&gt; = ((10 * (6 / (12 * -11))) + 17) + 5</span><br><span class="line">&gt; = ((10 * (6 / -132)) + 17) + 5</span><br><span class="line">&gt; = ((10 * 0) + 17) + 5</span><br><span class="line">&gt; = (0 + 17) + 5</span><br><span class="line">&gt; = 17 + 5</span><br><span class="line">&gt; = 22</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Solution 1 Stack<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">evalRPN</span><span class="params">(String[] tokens)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s : tokens) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.equals(<span class="string">"+"</span>)) &#123;</span><br><span class="line">                stack.push(stack.pop() + stack.pop());</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.equals(<span class="string">"-"</span>)) &#123;</span><br><span class="line">                stack.push(- stack.pop() + stack.pop());</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.equals(<span class="string">"*"</span>)) &#123;</span><br><span class="line">                stack.push(stack.pop() * stack.pop());</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.equals(<span class="string">"/"</span>)) &#123;</span><br><span class="line">                <span class="keyword">int</span> dividend = stack.pop();</span><br><span class="line">                stack.push(stack.pop() / dividend);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">//normal numbers</span></span><br><span class="line">                stack.push(Integer.parseInt(s));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="155-Min-Stack-Medium"><a href="#155-Min-Stack-Medium" class="headerlink" title="155. Min Stack (Medium) @"></a>155. Min Stack (Medium) <a href="https://leetcode.com/problems/min-stack/submissions/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.</p>
<ul>
<li>push(x) – Push element x onto stack.</li>
<li>pop() – Removes the element on top of the stack.</li>
<li>top() – Get the top element.</li>
<li>getMin() – Retrieve the minimum element in the stack.</li>
</ul>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; MinStack minStack = new MinStack();</span><br><span class="line">&gt; minStack.push(-2);</span><br><span class="line">&gt; minStack.push(0);</span><br><span class="line">&gt; minStack.push(-3);</span><br><span class="line">&gt; minStack.getMin();   --&gt; Returns -3.</span><br><span class="line">&gt; minStack.pop();</span><br><span class="line">&gt; minStack.top();      --&gt; Returns 0.</span><br><span class="line">&gt; minStack.getMin();   --&gt; Returns -2.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Solution 1 synchronous data stack and helper stack<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; data;</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; minElement;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MinStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        data = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        minElement = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        data.add(x);</span><br><span class="line">        <span class="keyword">if</span> (minElement.isEmpty() || minElement.peek() &gt;= x) &#123;</span><br><span class="line">            minElement.add(x);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            minElement.add(minElement.peek());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!data.isEmpty()) &#123;</span><br><span class="line">            data.pop();</span><br><span class="line">            minElement.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!data.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> data.peek();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"stack is empty"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!minElement.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> minElement.peek();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"stack is empty"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MinStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MinStack obj = new MinStack();</span></span><br><span class="line"><span class="comment"> * obj.push(x);</span></span><br><span class="line"><span class="comment"> * obj.pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.top();</span></span><br><span class="line"><span class="comment"> * int param_4 = obj.getMin();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></p>
<p>Solution 2 asynchronous </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; data;</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; minElement;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MinStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        data = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        minElement = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 思路 2：辅助栈和数据栈不同步</span></span><br><span class="line">    <span class="comment">// 关键 1：辅助栈的元素空的时候，必须放入新进来的数</span></span><br><span class="line">    <span class="comment">// 关键 2：新来的数小于或者等于辅助栈栈顶元素的时候，才放入（特别注意这里等于要考虑进去）</span></span><br><span class="line">    <span class="comment">// 关键 3：出栈的时候，辅助栈的栈顶元素等于数据栈的栈顶元素，才出栈，即"出栈保持同步"就可以了</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        data.add(x);</span><br><span class="line">        <span class="comment">// 辅助栈在必要的时候才增加</span></span><br><span class="line">        <span class="keyword">if</span> (minElement.isEmpty() || minElement.peek() &gt;= x) &#123;</span><br><span class="line">            minElement.add(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//关键3: 数据栈一定pop</span></span><br><span class="line">        <span class="keyword">if</span> (!data.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">// 注意：声明成 int 类型，这里完成了自动拆箱，从 Integer 转成了 int，因此下面的比较可以使用 "==" 运算符</span></span><br><span class="line">            <span class="comment">// 参考资料：https://www.cnblogs.com/GuoYaxiang/p/6931264.html</span></span><br><span class="line">            <span class="comment">// 如果把 top 变量声明成 Integer 类型，下面的比较就得使用 equals 方法</span></span><br><span class="line">            <span class="keyword">int</span> top = data.pop();</span><br><span class="line">            <span class="keyword">if</span> (top == minElement.peek()) &#123;</span><br><span class="line">                minElement.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!data.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> data.peek();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"stack is empty"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!minElement.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> minElement.peek();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"stack is empty"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MinStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MinStack obj = new MinStack();</span></span><br><span class="line"><span class="comment"> * obj.push(x);</span></span><br><span class="line"><span class="comment"> * obj.pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.top();</span></span><br><span class="line"><span class="comment"> * int param_4 = obj.getMin();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<p>Solution 3 Linked List</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Node head;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        <span class="keyword">int</span> min;</span><br><span class="line">        Node next;</span><br><span class="line">        </span><br><span class="line">        Node(<span class="keyword">int</span> val, <span class="keyword">int</span> min, Node next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">            <span class="keyword">this</span>.min = min;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            head = <span class="keyword">new</span> Node(x, x, <span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            head = <span class="keyword">new</span> Node(x, Math.min(head.min, x), head);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        head = head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> head.val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> head.min;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MinStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MinStack obj = new MinStack();</span></span><br><span class="line"><span class="comment"> * obj.push(x);</span></span><br><span class="line"><span class="comment"> * obj.pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.top();</span></span><br><span class="line"><span class="comment"> * int param_4 = obj.getMin();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><h3 id="172-Factorial-Trailing-Zeroes-Easy"><a href="#172-Factorial-Trailing-Zeroes-Easy" class="headerlink" title="172. Factorial Trailing Zeroes (Easy) @"></a>172. Factorial Trailing Zeroes (Easy) <a href="https://leetcode.com/problems/factorial-trailing-zeroes/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Given an integer <em>n</em>, return the number of trailing zeroes in <em>n</em>!.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: 3</span><br><span class="line">&gt; Output: 0</span><br><span class="line">&gt; Explanation: 3! = 6, no trailing zero.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: 5</span><br><span class="line">&gt; Output: 1</span><br><span class="line">&gt; Explanation: 5! = 120, one trailing zero.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Note:</strong> Your solution should be in logarithmic time complexity.</p>
</blockquote>
<p>Solution </p>
<ul>
<li>判断n!中有多少个5</li>
<li><a href="https://leetcode-cn.com/problems/factorial-trailing-zeroes/solution/xiang-xi-tong-su-de-si-lu-fen-xi-by-windliang-3/" target="_blank" rel="noopener">Detail</a></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">trailingZeroes</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        count += n / <span class="number">5</span>;</span><br><span class="line">        n = n / <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="190-Reverse-Bits-Easy"><a href="#190-Reverse-Bits-Easy" class="headerlink" title="190. Reverse Bits (Easy) @"></a>190. Reverse Bits (Easy) <a href="https://leetcode.com/problems/reverse-bits/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Reverse bits of a given 32 bits unsigned integer.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: 00000010100101000001111010011100</span><br><span class="line">&gt; Output: 00111001011110000010100101000000</span><br><span class="line">&gt; Explanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: 11111111111111111111111111111101</span><br><span class="line">&gt; Output: 10111111111111111111111111111111</span><br><span class="line">&gt; Explanation: The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is 10111111111111111111111111111111.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li>Note that in some languages such as Java, there is no unsigned integer type. In this case, both input and output will be given as signed integer type and should not affect your implementation, as the internal binary representation of the integer is the same whether it is signed or unsigned.</li>
<li>In Java, the compiler represents the signed integers using <a href="https://en.wikipedia.org/wiki/Two&#39;s_complement" target="_blank" rel="noopener">2’s complement notation</a>. Therefore, in <strong>Example 2</strong> above the input represents the signed integer <code>-3</code> and the output represents the signed integer <code>-1073741825</code>.</li>
</ul>
<p><strong>Follow up</strong>:</p>
<p>If this function is called many times, how would you optimize it?</p>
</blockquote>
<p>Solution 1 shift</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// you need treat n as an unsigned value</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverseBits</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (count &lt; <span class="number">32</span>) &#123;</span><br><span class="line">            res &lt;&lt;= <span class="number">1</span>; <span class="comment">//res is shifted by 1 position to left</span></span><br><span class="line">            res |= (n &amp; <span class="number">1</span>); <span class="comment">//just pick the last pos of n to OR res</span></span><br><span class="line">            n &gt;&gt;= <span class="number">1</span>; <span class="comment">//n is shifted by 1 pos to right =&gt; get rid of the last pos</span></span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="191-Number-of-1-Bits-Easy"><a href="#191-Number-of-1-Bits-Easy" class="headerlink" title="191. Number of 1 Bits (Easy) @"></a>191. Number of 1 Bits (Easy) <a href="https://leetcode.com/problems/number-of-1-bits/" target="_blank" rel="noopener">@</a></h3><blockquote>
<p>Write a function that takes an unsigned integer and return the number of ‘1’ bits it has (also known as the <a href="http://en.wikipedia.org/wiki/Hamming_weight" target="_blank" rel="noopener">Hamming weight</a>).</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: 00000000000000000000000000001011</span><br><span class="line">&gt; Output: 3</span><br><span class="line">&gt; Explanation: The input binary string 00000000000000000000000000001011 has a total of three &apos;1&apos; bits.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: 00000000000000000000000010000000</span><br><span class="line">&gt; Output: 1</span><br><span class="line">&gt; Explanation: The input binary string 00000000000000000000000010000000 has a total of one &apos;1&apos; bit.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; Input: 11111111111111111111111111111101</span><br><span class="line">&gt; Output: 31</span><br><span class="line">&gt; Explanation: The input binary string 11111111111111111111111111111101 has a total of thirty one &apos;1&apos; bits.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li>Note that in some languages such as Java, there is no unsigned integer type. In this case, the input will be given as signed integer type and should not affect your implementation, as the internal binary representation of the integer is the same whether it is signed or unsigned.</li>
<li>In Java, the compiler represents the signed integers using <a href="https://en.wikipedia.org/wiki/Two&#39;s_complement" target="_blank" rel="noopener">2’s complement notation</a>. Therefore, in <strong>Example 3</strong> above the input represents the signed integer <code>-3</code>.</li>
</ul>
<p><strong>Follow up</strong>:</p>
<p>If this function is called many times, how would you optimize it?</p>
</blockquote>
<p>Solution 1</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// you need to treat n as an unsigned value</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((n &amp; <span class="number">1</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">                res++;</span><br><span class="line">            &#125;</span><br><span class="line">            n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Solution 2 Flip<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// you need to treat n as an unsigned value</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">            res++;</span><br><span class="line">            <span class="comment">//always flip the least-significant 1-bit to 0</span></span><br><span class="line">            n &amp;= (n - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Graph"><a href="#Graph" class="headerlink" title="Graph"></a>Graph</h2><h2 id="Sliding-Window"><a href="#Sliding-Window" class="headerlink" title="Sliding Window"></a>Sliding Window</h2><h2 id="Partition"><a href="#Partition" class="headerlink" title="Partition"></a>Partition</h2>]]></content>
      
        
        <tags>
            
            <tag> Programming </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[KindleNote]]></title>
      <url>/2018/04/14/Kindle%20Note/</url>
      <content type="html"><![CDATA[<h3 id="Update-date-2018-4-14"><a href="#Update-date-2018-4-14" class="headerlink" title="Update date: 2018/4/14"></a>Update date: 2018/4/14</h3><ol>
<li>游戏玩家会为自己的购买行为寻找理由，使自己相信自己并不愚蠢。唯一的解决办法就是不断掏腰包，以继续游戏。<br>&lt;上瘾：让用户养成使用习惯的四大产品逻辑&gt;([美]尼尔·埃亚尔,[美]瑞安·胡佛) </li>
<li>游戏玩家会为自己的购买行为寻找理由，使自己相信自己并不愚蠢。唯一的解决办法就是不断掏腰包，以继续游戏。<br>&lt;上瘾：让用户养成使用习惯的四大产品逻辑&gt;([美]尼尔·埃亚尔,[美]瑞安·胡佛) </li>
<li>想想你第一次啜饮啤酒或品尝辛辣食物时的反应，觉得美味吗？应该不太可能。我们的身体对酒精、辣椒素以及使辛辣食物产生热辣感的化合物有一种本能排斥。可是，反复品尝之后，我们会慢慢喜欢上这类口味。看到其他人喜爱这种口味，我们就会多尝上几口，久而久之，我们会渐渐适应这种口味。为避免这种不喜他人之喜的认知失调，我们会慢慢改变自己对过去不喜欢的事物的看法。<br>&lt;上瘾：让用户养成使用习惯的四大产品逻辑&gt;([美]尼尔·埃亚尔,[美]瑞安·胡佛) </li>
<li>我们总会尽力和过去的行为保持一致<br>&lt;上瘾：让用户养成使用习惯的四大产品逻辑&gt;([美]尼尔·埃亚尔,[美]瑞安·胡佛) </li>
<li>我们总会尽力和过去的行为保持一<br>&lt;上瘾：让用户养成使用习惯的四大产品逻辑&gt;([美]尼尔·埃亚尔,[美]瑞安·胡佛) </li>
<li>我们总会高估自己的劳动成果<br>&lt;上瘾：让用户养成使用习惯的四大产品逻辑&gt;([美]尼尔·埃亚尔,[美]瑞安·胡佛) </li>
<li>图21 变化不定的内容驱使一些用户在信息流中不停地搜索新鲜内容，而对于内容提供者来说，他们的酬赏来<br>&lt;上瘾：让用户养成使用习惯的四大产品逻辑&gt;([美]尼尔·埃亚尔,[美]瑞安·胡佛) </li>
<li>驱使我们采取行动的，并不是酬赏本身，而是渴望酬赏时产生的那份迫切需要。<br>&lt;上瘾：让用户养成使用习惯的四大产品逻辑&gt;([美]尼尔·埃亚尔,[美]瑞安·胡佛) </li>
<li>我们通常会以为互联网的优势在于花样翻新，但其实人们只想在网络上继续做自己熟悉的事<br>&lt;上瘾：让用户养成使用习惯的四大产品逻辑&gt;([美]尼尔·埃亚尔,[美]瑞安·胡佛) </li>
<li>来自朋友或家人的推荐往往是科技传播的核心推动力<br>&lt;上瘾：让用户养成使用习惯的四大产品逻辑&gt;([美]尼尔·埃亚尔,[美]瑞安·胡佛) </li>
<li>新产品要想在市场上站稳脚跟，略胜一筹是远远不够的，必须要有绝对优势<br>&lt;上瘾：让用户养成使用习惯的四大产品逻辑&gt;([美]尼尔·埃亚尔,[美]瑞安·胡佛) </li>
<li>很多企业经营者都错误地认为，新产品只要比原有产品略胜一筹，就足以让用户一见倾心。但是，一旦涉及撼动用户的老习惯这个问题，天真的企业家们就会发现，好产品并不一定总能占据上风，尤其是当众多用户已经选择了其他具有竞争力的产品时<br>&lt;上瘾：让用户养成使用习惯的四大产品逻辑&gt;([美]尼尔·埃亚尔,[美]瑞安·胡佛) </li>
<li>提高增长速度最关键的因素就是‘病毒循环周期’”<br>&lt;上瘾：让用户养成使用习惯的四大产品逻辑&gt;([美]尼尔·埃亚尔,[美]瑞安·胡佛) </li>
<li>提高增长速度最关键的因素就是‘病毒循环周期<br>&lt;上瘾：让用户养成使用习惯的四大产品逻辑&gt;([美]尼尔·埃亚尔,[美]瑞安·胡佛) </li>
<li>提高增长速度最关键的因素就是‘病毒循环周期’”<br>&lt;上瘾：让用户养成使用习惯的四大产品逻辑&gt;([美]尼尔·埃亚尔,[美]瑞安·胡佛) </li>
<li>压力产生的不良情绪往往会触发这种无意识行为。<br>&lt;上瘾：让用户养成使用习惯的四大产品逻辑&gt;([美]尼尔·埃亚尔,[美]瑞安·胡佛) </li>
<li>上瘾模型包括四个阶段：触发，行动，多变的酬赏，投入。<br>&lt;上瘾：让用户养成使用习惯的四大产品逻辑&gt;([美]尼尔·埃亚尔,[美]瑞安·胡佛) </li>
<li>上瘾模型包括四个阶段：触发，行动，多变的酬赏，投<br>&lt;上瘾：让用户养成使用习惯的四大产品逻辑&gt;([美]尼尔·埃亚尔,[美]瑞安·胡佛) </li>
<li>瘾模型包括四个阶段：触发，行动，多变的酬赏，投入<br>&lt;上瘾：让用户养成使用习惯的四大产品逻辑&gt;([美]尼尔·埃亚尔,[美]瑞安·胡佛) </li>
<li>集网络连接、海量数据、超快网速三者于一身的技术正在使这个世界上瘾成性。<br>&lt;上瘾：让用户养成使用习惯的四大产品逻辑&gt;([美]尼尔·埃亚尔,[美]瑞安·胡佛) </li>
<li>苹果已经不再是一个创新者，而是已经成为了主流的象征<br>&lt;苹果首席设计师:乔纳森传 &gt;</li>
<li>设计不是看起来和感觉起来怎么样，而是用起来怎么样<br>&lt;苹果首席设计师:乔纳森传 &gt;</li>
<li>就算再索然无味的故事也要有一个结局<br>&lt;那个不为人知的故事 &gt;</li>
<li>人往往就是这个样子，在相处的过程中，每个人都会发现其他人与自己不同的地方，而当他们意识到这种不同带来的内在差异时，原本积极的感情，也会转化为无形的恶意。<br>&lt;那个不为人知的故事 &gt;</li>
<li>这很美妙。 当我睁开眼，你和朝阳一起存在。<br>&lt;那个不为人知的故事 &gt;</li>
<li>站在高处，你可以选择向下看。但是在低处，你别无选择。”<br>&lt;那个不为人知的故事 &gt;</li>
<li>如果一个人失去了基本尊严，那么他就可以像行尸走肉一样被控制。<br>&lt;那些忧伤的年轻人(十周年纪念版)&gt;(许知远) </li>
<li>暧昧的怀旧，这是现代人无法挥去的情结。<br>&lt;那些忧伤的年轻人(十周年纪念版)&gt;(许知远) </li>
<li>将爱情形式化，是一种社会的需要，是随着生活的愈益严酷而愈益迫切的需要。<br>&lt;那些忧伤的年轻人(十周年纪念版)&gt;(许知远) </li>
<li>我至少拥有青春中一个关键的情感——迷惘。<br>&lt;那些忧伤的年轻人(十周年纪念版)&gt;(许知远) </li>
<li>如今他们老了，我们也老了，像告别了蜜月期的情侣，我们相互指责对方的叛变，同时谁也无法忘记那些最美妙的时光。<br>&lt;那些忧伤的年轻人(十周年纪念版)&gt;(许知远) </li>
<li>真正感动人的，从来不是思想，而是年轻的勇气。李敖在这篇文章中，并没有表现出过人的思想，他只是以一个27岁的青年的身份在说话，他毫不掩饰他的感慨，他的愤怒，他的欲望，他的痛苦，和身处困境中却毫不动摇的勇敢……这一切正触动了所有年轻心灵的神经。<br>&lt;那些忧伤的年轻人(十周年纪念版)&gt;(许知远) </li>
<li>麦肯锡非常强调不是“为客户工作”(work for clients)而是“与客户合作”(work with clients)<br>&lt;麦肯锡方法（经管图书的常青树，外企员工入职必读图书）&gt;(艾森·拉塞尔(Ethan M.Rasiel)) </li>
<li>一次访谈要从一般性的问题问起，然后进行具体问题的提问。不要一头扎进敏感领域<br>&lt;麦肯锡方法（经管图书的常青树，外企员工入职必读图书）&gt;(艾森·拉塞尔(Ethan M.Rasiel)) </li>
<li>后退一步，搞清楚我们要解决的问题，然后看看手头的工作，问自己‘这些工作真的最重要吗？’<br>&lt;麦肯锡方法（经管图书的常青树，外企员工入职必读图书）&gt;(艾森·拉塞尔(Ethan M.Rasiel)) </li>
<li>一次只做一件事，做好本职工作——不要试图去做整个团队的工作<br>&lt;麦肯锡方法（经管图书的常青树，外企员工入职必读图书）&gt;(艾森·拉塞尔(Ethan M.Rasiel)) </li>
<li>30秒内向客户进行准确无误的解释<br>&lt;麦肯锡方法（经管图书的常青树，外企员工入职必读图书）&gt;(艾森·拉塞尔(Ethan M.Rasiel)) </li>
<li>假如事实证明你的初始假设是错误的，那就根据事实做出调整。<br>&lt;麦肯锡方法（经管图书的常青树，外企员工入职必读图书）&gt;(艾森·拉塞尔(Ethan M.Rasiel)) </li>
<li>相互独立、完全穷尽<br>&lt;麦肯锡方法（经管图书的常青树，外企员工入职必读图书）&gt;(艾森·拉塞尔(Ethan M.Rasiel)) </li>
<li>白家老大败家和老二兴业发家的故事最后凝炼为一个有进口无出口的木匣儿，被村村寨寨一代一代富的穷的庄稼人咀嚼着品味着删改着充实着传给自己的后代，成为本原无可企及的经典性的乡土教材……<br>&lt;白鹿原（茅盾文学奖获奖作品；插图珍藏精装本）&gt;(陈忠实著) </li>
<li>人能宏道，非道宏人<br>&lt;神游七部合集&gt;(徐公子胜治) </li>
<li>我见到她之前，从未想到要结婚；我娶了她几十年，从未后悔娶她，也未想过要娶别的女人<br>&lt;且以优雅过一生：杨绛传（参透杨绛先生的百年人生智慧，做一个明媚从容、淡定优雅的女子。不妥协，不慌张，不迷茫，且以优雅过一生。）&gt;(桑妮) </li>
<li>人，一生中会和很多人相遇，有些人只是为了擦身而过，有些人是等着一见如故<br>&lt;且以优雅过一生：杨绛传（参透杨绛先生的百年人生智慧，做一个明媚从容、淡定优雅的女子。不妥协，不慌张，不迷茫，且以优雅过一生。）&gt;(桑妮) </li>
<li>望之俨然8，接之也温<br>&lt;且以优雅过一生：杨绛传（参透杨绛先生的百年人生智慧，做一个明媚从容、淡定优雅的女子。不妥协，不慌张，不迷茫，且以优雅过一生。）&gt;(桑妮) </li>
<li>陪伴是最长情的告白<br>&lt;且以优雅过一生：杨绛传（参透杨绛先生的百年人生智慧，做一个明媚从容、淡定优雅的女子。不妥协，不慌张，不迷茫，且以优雅过一生。）&gt;(桑妮) </li>
<li>我们曾如此渴望命运的波澜，到最后才发现：人生最曼妙的风景，竟是内心的淡定与从容……我们曾如此期盼外界的认可，到最后才知道：世界是自己的，与他人毫无关系<br>&lt;且以优雅过一生：杨绛传（参透杨绛先生的百年人生智慧，做一个明媚从容、淡定优雅的女子。不妥协，不慌张，不迷茫，且以优雅过一生。）&gt;(桑妮) </li>
<li>一个人经过不同程度的锻炼，就获得不同程度的修养、不同程度的效益。好比香料，捣得愈碎，磨得愈细，香得愈浓烈。<br>&lt;且以优雅过一生：杨绛传（参透杨绛先生的百年人生智慧，做一个明媚从容、淡定优雅的女子。不妥协，不慌张，不迷茫，且以优雅过一生。）&gt;(桑妮) </li>
<li>不乱于心，不困于情。不畏将来，不念过往。如此，安好！<br>&lt;且以优雅过一生：杨绛传（参透杨绛先生的百年人生智慧，做一个明媚从容、淡定优雅的女子。不妥协，不慌张，不迷茫，且以优雅过一生。）&gt;(桑妮) </li>
<li>“信任”就是世上绝大多数金钱的唯一后盾。<br>&lt;人类简史：从动物到上帝（图文精编版） (开放历史系列)&gt;(Yuval Noah Harari) </li>
<li>死虽然可怕，但这也就像是一次出门旅行。既然这个世上的芸芸众生早晚都要走上死的旅途，那么自己想要和最心爱的人，以最美的形式去旅行。<br>&lt;失乐园 (渡边淳一经典作品集)&gt;(渡边淳一) </li>
<li>葬礼是人生的缩影<br>&lt;失乐园 (渡边淳一经典作品集)&gt;(渡边淳一) </li>
<li>真正控制科学发展进度表的，也很少是科学家。<br>&lt;人类简史：从动物到上帝（图文精编版） (开放历史系列)&gt;(Yuval Noah Harari) </li>
<li>恐怕只有性的世界是无所谓进步与退步的。<br>&lt;失乐园 (渡边淳一经典作品集)&gt;(渡边淳一) </li>
<li>然而，演化本来就没有唯一的目的。器官的演化没有唯一的目的，而器官的使用方式也不断在变化。现在人体的所有器官早在几亿年前就已经出现了原型，而现在所有器官都不只做着原型所做的事。器官之所以演化是为了某种特定功能，但等到器官存在之后，要用作其他功能也并无不可。<br>&lt;人类简史：从动物到上帝（图文精编版） (开放历史系列)&gt;(Yuval Noah Harari) </li>
<li>事实上，许多人认知的“自然”和“不自然”并不是生物学的概念，而是基督教神学的概念。神学上所谓的“自然”，指的是“符合创造自然的神的旨意”。基督教神学家认为，上帝创造了人的身体，并且让每个肢体和器官都有特定的目的。如<br>&lt;人类简史：从动物到上帝（图文精编版） (开放历史系列)&gt;(Yuval Noah Harari) </li>
<li>他们认为，个人的价值是由社会阶级、由他人的看法所决定。<br>&lt;人类简史：从动物到上帝（图文精编版） (开放历史系列)&gt;(Yuval Noah Harari) </li>
<li>奢侈品史上常有这样的情况，就是原本的奢侈品往往最后会成为必需品，而且带来新的义务<br>&lt;人类简史：从动物到上帝（图文精编版） (开放历史系列)&gt;(Yuval Noah Harari) </li>
<li>病如西子胜三分<br>&lt;红楼梦脂评汇校本 (BookDNA典藏书系)&gt;(曹雪芹;脂砚斋) </li>
<li>心较比干多一窍<br>&lt;红楼梦脂评汇校本 (BookDNA典藏书系)&gt;(曹雪芹;脂砚斋) </li>
<li>一双似泣非泣含露目<br>&lt;红楼梦脂评汇校本 (BookDNA典藏书系)&gt;(曹雪芹;脂砚斋) </li>
<li>两弯似蹙非蹙罥烟眉<br>&lt;红楼梦脂评汇校本 (BookDNA典藏书系)&gt;(曹雪芹;脂砚斋) </li>
<li>粉面含春威不露，丹唇未启笑先闻<br>&lt;红楼梦脂评汇校本 (BookDNA典藏书系)&gt;(曹雪芹;脂砚斋) </li>
<li>蛋挞是不能一口全吃掉的。 先咬一口，滚烫得令嘴唇受惊，但舍不得吞。 含在嘴里，暖热而踏实，慢慢吃。此时酥皮会有残屑，顺势撒下，一身都是。又薄又脆，沾衣亦不管。再咬第二口…… 直至连略带焦黄但又香脆无比的底层亦一并干掉，马上开始另一个。 ——通常，第二个没第一个好吃。<br>&lt;饺子&gt;(李碧华) </li>
<li>气韵是作家的后脑勺。作家自己是看不到的。<br>&lt;罗生门（经典悬疑电影原著，对人性最深刻的拷问） (经典译林)&gt;(芥川龙之介) </li>
<li>我们究竟为什么喜欢幼小的孩子呢？这个理由的一半，至少是由于用不着担心被小孩子欺骗。<br>&lt;罗生门（经典悬疑电影原著，对人性最深刻的拷问） (经典译林)&gt;(芥川龙之介) </li>
<li>天才和我们只有一步的间隔。为了理解这一步，我们必须懂得百里路的一半是九十九里的超数学。<br>&lt;罗生门（经典悬疑电影原著，对人性最深刻的拷问） (经典译林)&gt;(芥川龙之介) </li>
<li>发现民众的愚蠢，并不值得夸耀。但是，发现我们自己也是民众，倒的确值得夸耀。<br>&lt;罗生门（经典悬疑电影原著，对人性最深刻的拷问） (经典译林)&gt;(芥川龙之介) </li>
<li>舆论常常是一种私刑。私刑又常常是一种娱乐。好比使用新闻记事来取代手枪。<br>&lt;罗生门（经典悬疑电影原著，对人性最深刻的拷问） (经典译林)&gt;(芥川龙之介) </li>
<li>人生好像缺页很多的书。很难把它说成是一部书，然而它又确实是一部书。<br>&lt;罗生门（经典悬疑电影原著，对人性最深刻的拷问） (经典译林)&gt;(芥川龙之介) </li>
<li>她们未必懂得丈夫们所为之舍生取义的理念和目标，但她们肯摒弃浮华肯用生命去诠释什么叫做爱情<br>&lt;他们最幸福&gt;(大冰 著) </li>
<li>“要把地面上的人看清楚，就要和地面保持距离”。——卡尔维诺<br>&lt;他们最幸福&gt;(大冰 著) </li>
<li>我们所观察到的并不是自然本身，而是自然在我们的提问下向我们显现出的面貌<br>&lt;有限与无限的游戏&gt;([美] 詹姆斯·卡斯) </li>
<li>爱国主义──指的是意欲通过增强一个社会的权力来保护社会中的权力<br>&lt;有限与无限的游戏&gt;([美] 詹姆斯·卡斯) </li>
<li>这些博物馆的创立初衷并不是保护艺术品免于遭受人民破坏，而是使人民免于接触艺术。<br>&lt;有限与无限的游戏&gt;([美] 詹姆斯·卡斯) </li>
<li>公共意志及其权力所不及之处，不足以言节。<br>&lt;认得几个字&gt;(张大春) </li>
<li>“不应该”居然是“应该”的产物<br>&lt;认得几个字&gt;(张大春) </li>
<li>关于梦，神秘的也许不是那些无梦的真人或至人，是每一个人在睡眠中伟大的创作，醒来不记，怕是创作者真正的潇洒。<br>&lt;认得几个字&gt;(张大春) </li>
<li>这技巧的本质，就是规则<br>&lt;亵渎&gt;(烟雨江南) </li>
<li>宇宙中有多少生物，就有多少中心。<br>&lt;泛若不系之舟&gt;(傅真) </li>
<li>如果“无神论”是建立在无知而自大的基础上，那么根本不是一件值得自豪的事情。<br>&lt;泛若不系之舟&gt;(傅真) </li>
<li>宗教的偏执性其实是来自于人而并非它的本身<br>&lt;泛若不系之舟&gt;(傅真) </li>
<li>那片土地上传统深植而禁忌丛生，却也一直有人勇敢地打破命运释放灵魂。<br>&lt;泛若不系之舟&gt;(傅真) </li>
<li>我什么也没忘，但有些事只适合收藏。<br>&lt;去你家玩好吗&gt;(韩寒 监制) </li>
<li>谁会讲故事，谁就拥有世界<br>&lt;白说&gt;(白岩松) </li>
<li>比起那些用大嗓门企图压制世界的人，让全世界都安静下来听你小声说话的人更可畏。<br>&lt;告白与告别&gt;(韩寒) </li>
<li>她的声音被保存下来，这是几百万沉默者中的一声呐喊，虽然这呐喊声是那么的微弱……但它比杀人者的嚎叫声更持久，比这个时代中所有的声音更响亮。<br>&lt;世界文学文库:安妮日记 &gt;(安妮•弗兰克 (Frank.A.)) </li>
<li>在内心深处，年轻人比老年人更寂寞。<br>&lt;世界文学文库:安妮日记 &gt;(安妮•弗兰克 (Frank.A.)) </li>
<li>没什么好怒的，大家都想赶时间，但我不想赶着死；大家都想抄捷径，但我不想抄末路。<br>&lt;从你的全世界路过（完美升级版）&gt;(张嘉佳) </li>
<li>你可以不接受，这是一种自由。但不屑和抨击，翻到另外一个世界观，只能说明你的无知和武断。<br>&lt;从你的全世界路过（完美升级版）&gt;(张嘉佳) </li>
<li>看到小清新不要说矫情。看到二逼段子不要说脑残。看到文艺范不要说装×。看到诗歌不要说无病呻吟。看到意识流不要说傻×。 每个人有自己的表达方式，如果你不喜欢，只能说明不是为你准备的。<br>&lt;从你的全世界路过（完美升级版）&gt;(张嘉佳) </li>
<li>我们常说，轻易得来的，不会懂得珍惜。 其实不然，轻易得来的，你会害怕失去。<br>&lt;从你的全世界路过（完美升级版）&gt;(张嘉佳) </li>
<li>艺术家永远支持鸡蛋，所以鸡蛋和墙碰撞的时候，不去问墙是对的，还是鸡蛋是对的，不管谁是对的，首先支持鸡蛋，<br>&lt;鱼羊野史·第1卷&gt;(高晓松) </li>
<li>1915年，美国一位名叫特鲁多的医生去世了，他的墓碑上刻着三行字：“偶尔去治愈，常常去帮助，总是在抚慰。”<br>&lt;白说&gt;(白岩松) </li>
<li>如果总在为未来忧虑，而不能享受此时此刻的时光，你可以把整个余生都搭进去，但你真的打算这么过一辈子吗？要知道，你所担心的事情，只有不超过10%会变成现实，其余的都是自己吓自己。而且生命中有一个很奇妙的逻辑，如果你真的过好今天，明天也还不错。<br>&lt;白说&gt;(白岩松) </li>
<li>漂亮的失败是另一种成功<br>&lt;白说&gt;(白岩松) </li>
<li>生命不只是使用，还需要奖励。<br>&lt;白说&gt;(白岩松) </li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Reading </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Windows平台最优秀的解压软件：Bandizip]]></title>
      <url>/2018/01/25/Windows%E5%B9%B3%E5%8F%B0%E6%9C%80%E4%BC%98%E7%A7%80%E7%9A%84%E8%A7%A3%E5%8E%8B%E8%BD%AF%E4%BB%B6%EF%BC%9ABandizip/</url>
      <content type="html"><![CDATA[<p>Windows平台常用的解压缩软件有很多，例如WinRAR、WinZIP、好压、7zip。然而好压、快压五花八门的广告植入和7zip的画风过于极客都无法满足我对软件的优雅的要求。终于一款界面简洁又不失设计感的解压软件出现在了我的眼前——Bandizip。</p>
<h3 id="Bandizip简介"><a href="#Bandizip简介" class="headerlink" title="Bandizip简介"></a>Bandizip简介</h3><p>Bandizip压缩软件是一款轻量级的免费解压缩工具，来自韩国。支持查看ZIP、7Z、RAR后缀的绝大多数windows压缩文档格式，TAR、GZ、TGZ等UNIX格式，以及CD/DVD镜像等文件格式。</p>
<h3 id="特点介绍"><a href="#特点介绍" class="headerlink" title="特点介绍"></a>特点介绍</h3><ol>
<li><p>文件预览</p>
<p>当我们右击压缩包时，Bandizip会自动进行文件预览，能够让你更加方便快捷的看到压缩包总的内容，从而帮助你决定是否要解压，这比通常双击之后还要继续右击解压的操作要便捷得多。</p>
<p><img src="http://ww1.sinaimg.cn/large/ab97666ely1fnszlsvjpcj20gb092aa4.jpg" alt="文件预览"></p>
</li>
<li><p>【自动解压】命令</p>
<p>从前我们总是会遇到解压一个压缩包，解压之后发现解压的文件铺满了屏幕，或者是选择解压到某一文件夹中然后发现多嵌套了一层文件夹，这让许多有强迫症的同学内心极度崩溃。然而Bandizip最为使用的一个特点就是可以进行自动解压。</p>
<p><img src="http://ww1.sinaimg.cn/large/ab97666ely1fnszlsurn6j20cs03y746.jpg" alt="自动解压"></p>
<p>Bandizip会自动识别压缩文件中是只有单一文件夹，如果是那么就直接解压文件，若有多个文件，则新建与压缩包同名的文件夹，在此文件夹中解压。</p>
</li>
<li><p>图片预览</p>
<p>当需要从压缩文件中找到特定的图片时，Bandizip内建的缩略图浏览器就显得十分必要，双击进入压缩文件就可以预览所有图片</p>
<p><img src="http://ww1.sinaimg.cn/large/ab97666ely1fnszlt1fqij20mc0glwiw.jpg" alt="图片预览"></p>
</li>
<li><p>图标颜色区分</p>
<p>Bandizip对于不同压缩格式文件的图标颜色显示是不一样的。例如，zip文件是蓝色，7z文件是绿色</p>
<p><img src="http://ww1.sinaimg.cn/large/ab97666ely1fnszlsuo5rj207b03qq2u.jpg" alt="图标颜色"></p>
</li>
<li><p>界面风格</p>
<p>6.0版本之后Bandizip的界面与Win10系统的风格很接近</p>
<p><img src="http://ww1.sinaimg.cn/large/ab97666ely1fnszlszjf1j20md0gjgo2.jpg" alt="界面"></p>
<p>​</p>
</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>压缩软件作为我们日常办公学习的常用软件，就是要做到简洁、高效。而Bandizip恰恰做到了简洁统一的界面和易用高效的使用体验。并且Bandizip十分轻量，免费，无广告。它配得上被称为Windows平台最优秀的一款压缩软件。</p>
<p><a href="https://www.bandisoft.com/bandizip/cn/" target="_blank" rel="noopener">Bandizip官网</a></p>
]]></content>
      
        
        <tags>
            
            <tag> Softwares </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DailyTools]]></title>
      <url>/2018/01/25/DailyTools/</url>
      <content type="html"><![CDATA[<p>There’re some tools I always use during my daily life and I will introduce the detail of some of them in the future.</p>
<h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><ul>
<li>系统优化<ul>
<li>火绒安全</li>
<li>净网大师</li>
<li>RightMenuMgr</li>
<li>CCleaner</li>
<li>Bandizip（压缩）</li>
<li>ThrottleStop（锁频）</li>
</ul>
</li>
<li>系统美化<ul>
<li>StartIsBack</li>
<li>XMeters（监控硬件）</li>
</ul>
</li>
<li>效率提升<ul>
<li>Listary</li>
<li>Wox<ul>
<li>Everything</li>
</ul>
</li>
<li>QuickLook</li>
<li>Seer</li>
<li>AutoHotKey</li>
</ul>
</li>
<li>常用工具<ul>
<li>Shadowsocks</li>
<li>幕布</li>
<li>墨刀</li>
<li>iSlide（PPT）</li>
<li>Typora（Markdown）</li>
<li>Masterway</li>
<li>SPlayer</li>
<li>福晰阅读器</li>
<li>Teamviewer</li>
<li>Writage（md转doc）</li>
</ul>
</li>
<li>代码<ul>
<li>Sublime Text</li>
<li>JetBrains</li>
</ul>
</li>
</ul>
<h3 id="IOS"><a href="#IOS" class="headerlink" title="IOS"></a>IOS</h3><ul>
<li>iPhone<ul>
<li>系统<ul>
<li>Geekbench</li>
<li>AIDA64</li>
<li>清理君</li>
</ul>
</li>
<li>工具<ul>
<li>Spark（邮件）</li>
<li>熊猫吃短信</li>
<li>DataFlow（流量监控）</li>
<li>Workflow</li>
<li>私家藏书</li>
<li>航班管家</li>
<li>历史价格查询</li>
<li>Wingy（vps）</li>
</ul>
</li>
<li>娱乐<ul>
<li>JRS体育</li>
<li>Inoreader</li>
<li>Weico</li>
</ul>
</li>
</ul>
</li>
<li>iPad<ul>
<li>常用工具<ul>
<li>Fantastical（日历）</li>
<li>Airmail</li>
<li>欧路词典</li>
<li>极光字典</li>
<li>duet</li>
<li>博看期刊</li>
</ul>
</li>
<li>学习工具<ul>
<li>Archimedes（计算）</li>
<li>WolframAlpha</li>
<li>PDF Expert</li>
<li>福晰阅读器</li>
<li>Pythonista（Python IDE）</li>
<li>Source（GitHub）</li>
<li>Textastic Code Editor</li>
<li>MathPad</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><ul>
<li>黑域</li>
<li>绿色守护</li>
<li>夸克浏览器</li>
<li>Aris终端桌面</li>
</ul>
<h3 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h3><ul>
<li>Adblock Plus</li>
<li>Black Menu for Google</li>
<li>BookMark Manager</li>
<li>Google Keep</li>
<li>Imagus</li>
<li>Infinity</li>
<li>LiveReload</li>
<li>Nimbus Screenshot &amp; Screen Video Recorder</li>
<li>Proxy SwitchOmega</li>
<li>Tampermonkey</li>
<li>Vimium</li>
<li>二维码生成器</li>
<li>划词翻译</li>
<li>新浪微博图床</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> Softwares </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[IDEA创建JEE项目]]></title>
      <url>/2018/01/25/IDEA%E5%88%9B%E5%BB%BAJEE%E9%A1%B9%E7%9B%AE/</url>
      <content type="html"><![CDATA[<h3 id="环境准备："><a href="#环境准备：" class="headerlink" title="环境准备："></a>环境准备：</h3><ol>
<li>Intellij IDEA 2017.2.5</li>
<li>JAVA jdk1.8.0_45</li>
<li>Tomcat 8.5</li>
</ol>
<hr>
<h3 id="项目创建步骤"><a href="#项目创建步骤" class="headerlink" title="项目创建步骤"></a>项目创建步骤</h3><ol>
<li>Create New Project<br><img src="http://upload-images.jianshu.io/upload_images/8743973-8d9d89c37d902e7e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="初始界面"></li>
<li>创建JavaEE项目<br><img src="http://upload-images.jianshu.io/upload_images/8743973-895fe7170bdcbca8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置选项"></li>
</ol>
<ul>
<li>项目名称<br><img src="http://upload-images.jianshu.io/upload_images/8743973-ab7c0ef312db8292.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="项目名称"></li>
</ul>
<ol>
<li>创建classes和lib文件</li>
</ol>
<ul>
<li>File–&gt; Project Structure –&gt; Module –&gt; Sources –&gt; WEB-INF<br><img src="http://upload-images.jianshu.io/upload_images/8743973-755cea0a1b43cf90.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li>
<li>创建文件夹<br><img src="http://upload-images.jianshu.io/upload_images/8743973-6fb9b0eeecf02ad6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="classes和lib"></li>
</ul>
<ol>
<li>Paths路径配置</li>
</ol>
<ul>
<li>选择Paths，选择Use Modules complie Output path，指定路径为上面创建的classes目录<br><img src="http://upload-images.jianshu.io/upload_images/8743973-1b13ca0bedff9022.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paths"></li>
</ul>
<ol>
<li>添加依赖路径</li>
</ol>
<ul>
<li>切换到 Dependencies  –&gt; “+” –&gt;JARs or directories…<br><img src="http://upload-images.jianshu.io/upload_images/8743973-720e1884e94ffa56.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Dependencies"></li>
<li>选择创建的lib目录<br><img src="http://upload-images.jianshu.io/upload_images/8743973-6507f4ac415c7047.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="lib"></li>
<li>选择Jar Directory<br><img src="http://upload-images.jianshu.io/upload_images/8743973-23e04c1d0c430d4a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Jar Directory"><br><img src="http://upload-images.jianshu.io/upload_images/8743973-ee3cabcc9f50f13b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="添加成功"></li>
</ul>
<ol>
<li>切换到 Artifacts选项卡，IDEA会为该项目自动创建一个名为“JavaEE_war exploded”的打包方式，表示 打包成war包，并且是文件展开性的，输出路径为当前项目下的 out 文件夹，保持默认即可。另外勾选下“Include in project build”，表示编译的时候就打包部署，勾选“Show content of elements”，表示显示详细的内容列表。<br><img src="http://upload-images.jianshu.io/upload_images/8743973-252025698c995aed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Artifacts"></li>
<li>配置Tomcat</li>
</ol>
<ul>
<li>点击Edit Configuration<br><img src="http://upload-images.jianshu.io/upload_images/8743973-c745744bedd77ea4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Edit Configuration"></li>
<li>添加配置<br><img src="http://upload-images.jianshu.io/upload_images/8743973-f1d2a8c074861589.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Run/Debug Configuration"></li>
<li>按下图设置<br><img src="http://upload-images.jianshu.io/upload_images/8743973-6a54aa3e094cfe6e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li>
<li>切换至Deployment<br><img src="http://upload-images.jianshu.io/upload_images/8743973-dcf12e312de8cd60.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Deployment"></li>
</ul>
<ol>
<li>项目建立完成</li>
</ol>
<p>参考：<br><a href="http://blog.csdn.net/yhao2014/article/details/45740111" target="_blank" rel="noopener">http://blog.csdn.net/yhao2014/article/details/45740111</a><br><a href="http://www.jianshu.com/p/455c7c11dfb2" target="_blank" rel="noopener">http://www.jianshu.com/p/455c7c11dfb2</a></p>
]]></content>
      
        
        <tags>
            
            <tag> JEE </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
